// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"go-graphql-equipamento/graph/model"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	CPU struct {
		ID         func(childComplexity int) int
		Marca      func(childComplexity int) int
		MaxRAM     func(childComplexity int) int
		Modelo     func(childComplexity int) int
		Nucleos    func(childComplexity int) int
		Tdp        func(childComplexity int) int
		Velocidade func(childComplexity int) int
	}

	Camera struct {
		ID     func(childComplexity int) int
		Marca  func(childComplexity int) int
		Modelo func(childComplexity int) int
	}

	ComponenteApagado struct {
		ID     func(childComplexity int) int
		Marca  func(childComplexity int) int
		Modelo func(childComplexity int) int
	}

	ComponenteAtualizado struct {
		Atualizacao func(childComplexity int) int
		ID          func(childComplexity int) int
		Modelo      func(childComplexity int) int
	}

	ComponenteCriado struct {
		ID             func(childComplexity int) int
		Modelo         func(childComplexity int) int
		TipoComponente func(childComplexity int) int
	}

	Computador struct {
		Conectividade func(childComplexity int) int
		Equipamento   func(childComplexity int) int
		Hardware      func(childComplexity int) int
		ID            func(childComplexity int) int
		Info          func(childComplexity int) int
		Nome          func(childComplexity int) int
		Perifericos   func(childComplexity int) int
		Software      func(childComplexity int) int
	}

	ComputadorAtualizado struct {
		Atualizacao func(childComplexity int) int
		ID          func(childComplexity int) int
		Nome        func(childComplexity int) int
	}

	ComputadorCriado struct {
		ID   func(childComplexity int) int
		Nome func(childComplexity int) int
	}

	Conectividade struct {
		ConectadoDominio func(childComplexity int) int
		Ethernet         func(childComplexity int) int
		Wifi             func(childComplexity int) int
	}

	ConexoesMBoard struct {
		Pcie3_16 func(childComplexity int) int
		Pcie4_16 func(childComplexity int) int
		Sata     func(childComplexity int) int
	}

	EquipamentoExterno struct {
		Camera    func(childComplexity int) int
		Microfone func(childComplexity int) int
	}

	Gpu struct {
		ID         func(childComplexity int) int
		Marca      func(childComplexity int) int
		Modelo     func(childComplexity int) int
		Saidas     func(childComplexity int) int
		Tdp        func(childComplexity int) int
		Velocidade func(childComplexity int) int
		Vram       func(childComplexity int) int
	}

	HardwareInterno struct {
		CPUUtil       func(childComplexity int) int
		GpuUtil       func(childComplexity int) int
		RAMMemoria    func(childComplexity int) int
		RAMSlots      func(childComplexity int) int
		RAMTipo       func(childComplexity int) int
		RAMVelocidade func(childComplexity int) int
	}

	Informacao struct {
		Dominio          func(childComplexity int) int
		SalaAtribuida    func(childComplexity int) int
		SistemaOperativo func(childComplexity int) int
		TipoPc           func(childComplexity int) int
		TipoUtilisacao   func(childComplexity int) int
		UltimaInspecao   func(childComplexity int) int
		Utilisacao       func(childComplexity int) int
	}

	InterfacesMBoard struct {
		Audio   func(childComplexity int) int
		Display func(childComplexity int) int
		Hdmi    func(childComplexity int) int
		Lan     func(childComplexity int) int
		Usb2    func(childComplexity int) int
		Usb3    func(childComplexity int) int
		Wifi    func(childComplexity int) int
	}

	Item struct {
		ID        func(childComplexity int) int
		Marca     func(childComplexity int) int
		Modelo    func(childComplexity int) int
		Nome      func(childComplexity int) int
		PaginaWeb func(childComplexity int) int
	}

	ItemAtualizado struct {
		Atualizacao func(childComplexity int) int
		ID          func(childComplexity int) int
		Modelo      func(childComplexity int) int
		Nome        func(childComplexity int) int
	}

	ItemCriado struct {
		ID   func(childComplexity int) int
		Nome func(childComplexity int) int
	}

	ListaHardware struct {
		Armazenamento func(childComplexity int) int
		CPU           func(childComplexity int) int
		Gpu           func(childComplexity int) int
		PlacaM        func(childComplexity int) int
		RAM           func(childComplexity int) int
	}

	MBoard struct {
		Chipset           func(childComplexity int) int
		Conexoes          func(childComplexity int) int
		DimMaxMem         func(childComplexity int) int
		DimMaxVelc        func(childComplexity int) int
		DimMemType        func(childComplexity int) int
		DimSlots          func(childComplexity int) int
		FamiliaCompativel func(childComplexity int) int
		ID                func(childComplexity int) int
		Interfaces        func(childComplexity int) int
		Marca             func(childComplexity int) int
		Modelo            func(childComplexity int) int
		Socket            func(childComplexity int) int
		TipoMemoria       func(childComplexity int) int
	}

	Microfone struct {
		ID     func(childComplexity int) int
		Marca  func(childComplexity int) int
		Modelo func(childComplexity int) int
	}

	Mutation struct {
		ApagarComponente func(childComplexity int, id string) int
		ApagarComputador func(childComplexity int, id string) int
		ApagarItem       func(childComplexity int, id string) int
		ApagarSoftware   func(childComplexity int, id string) int
		CriarCPU         func(childComplexity int, input model.NovoCPU) int
		CriarCamera      func(childComplexity int, input model.NovaCamera) int
		CriarComputador  func(childComplexity int, input model.NovoComputador) int
		CriarGpu         func(childComplexity int, input model.NovoGpu) int
		CriarItem        func(childComplexity int, input model.NovoItem) int
		CriarMboard      func(childComplexity int, input model.NovaMBoard) int
		CriarMicrofone   func(childComplexity int, input model.NovoMicrofone) int
		CriarRAM         func(childComplexity int, input model.NovoRAM) int
		CriarSoftware    func(childComplexity int, input model.NovoSoftware) int
		CriarStorage     func(childComplexity int, input model.NovoStorage) int
		UpdateCPU        func(childComplexity int, id string, input model.NovoCPU) int
		UpdateComputador func(childComplexity int, id string, input model.NovoComputador) int
		UpdateGpu        func(childComplexity int, id string, input model.NovoGpu) int
		UpdateItem       func(childComplexity int, id string, input model.NovoItem) int
		UpdateRAM        func(childComplexity int, id string, input model.NovoRAM) int
		UpdateSoftware   func(childComplexity int, id string, input model.NovoSoftware) int
	}

	Query struct {
		GetCPU          func(childComplexity int, id string) int
		GetCPUS         func(childComplexity int) int
		GetCamera       func(childComplexity int, id string) int
		GetCameras      func(childComplexity int) int
		GetComputador   func(childComplexity int, id string) int
		GetComputadores func(childComplexity int) int
		GetGpu          func(childComplexity int, id string) int
		GetGpus         func(childComplexity int) int
		GetItem         func(childComplexity int, id string) int
		GetItems        func(childComplexity int) int
		GetMBoard       func(childComplexity int, id string) int
		GetMBoards      func(childComplexity int) int
		GetMicrofone    func(childComplexity int, id string) int
		GetMicrofones   func(childComplexity int) int
		GetRAM          func(childComplexity int, id string) int
		GetRAMS         func(childComplexity int) int
		GetSoftware     func(childComplexity int, id string) int
		GetSoftwares    func(childComplexity int) int
		GetStorage      func(childComplexity int, id string) int
		GetStorages     func(childComplexity int) int
	}

	RAM struct {
		ID         func(childComplexity int) int
		Marca      func(childComplexity int) int
		Memoria    func(childComplexity int) int
		Modelo     func(childComplexity int) int
		Tipo       func(childComplexity int) int
		Velocidade func(childComplexity int) int
	}

	RegistoApagado struct {
		ID   func(childComplexity int) int
		Nome func(childComplexity int) int
	}

	Software struct {
		Nome func(childComplexity int) int
		Tipo func(childComplexity int) int
	}

	SoftwareAtualizado struct {
		Atualizacao func(childComplexity int) int
		ID          func(childComplexity int) int
		Nome        func(childComplexity int) int
	}

	SoftwareCriado struct {
		ID   func(childComplexity int) int
		Nome func(childComplexity int) int
	}

	Storage struct {
		Capacidade func(childComplexity int) int
		ID         func(childComplexity int) int
		Marca      func(childComplexity int) int
		Nome       func(childComplexity int) int
		Tipo       func(childComplexity int) int
		Velocidade func(childComplexity int) int
	}
}

type MutationResolver interface {
	UpdateComputador(ctx context.Context, id string, input model.NovoComputador) (*model.ComputadorAtualizado, error)
	UpdateGpu(ctx context.Context, id string, input model.NovoGpu) (*model.ComponenteAtualizado, error)
	UpdateCPU(ctx context.Context, id string, input model.NovoCPU) (*model.ComponenteAtualizado, error)
	UpdateRAM(ctx context.Context, id string, input model.NovoRAM) (*model.ComponenteAtualizado, error)
	UpdateItem(ctx context.Context, id string, input model.NovoItem) (*model.ItemAtualizado, error)
	UpdateSoftware(ctx context.Context, id string, input model.NovoSoftware) (*model.SoftwareAtualizado, error)
	CriarSoftware(ctx context.Context, input model.NovoSoftware) (*model.SoftwareCriado, error)
	CriarComputador(ctx context.Context, input model.NovoComputador) (*model.ComputadorCriado, error)
	CriarItem(ctx context.Context, input model.NovoItem) (*model.ItemCriado, error)
	CriarCPU(ctx context.Context, input model.NovoCPU) (*model.ComponenteCriado, error)
	CriarGpu(ctx context.Context, input model.NovoGpu) (*model.ComponenteCriado, error)
	CriarRAM(ctx context.Context, input model.NovoRAM) (*model.ComponenteCriado, error)
	CriarMboard(ctx context.Context, input model.NovaMBoard) (*model.ComponenteCriado, error)
	CriarStorage(ctx context.Context, input model.NovoStorage) (*model.ComponenteCriado, error)
	CriarMicrofone(ctx context.Context, input model.NovoMicrofone) (*model.ComponenteCriado, error)
	CriarCamera(ctx context.Context, input model.NovaCamera) (*model.ComponenteCriado, error)
	ApagarComponente(ctx context.Context, id string) (*model.ComponenteApagado, error)
	ApagarItem(ctx context.Context, id string) (*model.RegistoApagado, error)
	ApagarSoftware(ctx context.Context, id string) (*model.RegistoApagado, error)
	ApagarComputador(ctx context.Context, id string) (*model.RegistoApagado, error)
}
type QueryResolver interface {
	GetComputadores(ctx context.Context) ([]*model.Computador, error)
	GetComputador(ctx context.Context, id string) (*model.Computador, error)
	GetCPUS(ctx context.Context) ([]*model.CPU, error)
	GetCPU(ctx context.Context, id string) (*model.CPU, error)
	GetGpus(ctx context.Context) ([]*model.Gpu, error)
	GetGpu(ctx context.Context, id string) (*model.Gpu, error)
	GetRAMS(ctx context.Context) ([]*model.RAM, error)
	GetRAM(ctx context.Context, id string) (*model.RAM, error)
	GetItems(ctx context.Context) ([]*model.Item, error)
	GetItem(ctx context.Context, id string) (*model.Item, error)
	GetSoftwares(ctx context.Context) ([]*model.Software, error)
	GetSoftware(ctx context.Context, id string) (*model.Software, error)
	GetMicrofones(ctx context.Context) ([]*model.Microfone, error)
	GetMicrofone(ctx context.Context, id string) (*model.Microfone, error)
	GetCameras(ctx context.Context) ([]*model.Camera, error)
	GetCamera(ctx context.Context, id string) (*model.Camera, error)
	GetStorages(ctx context.Context) ([]*model.Storage, error)
	GetStorage(ctx context.Context, id string) (*model.Storage, error)
	GetMBoards(ctx context.Context) ([]*model.MBoard, error)
	GetMBoard(ctx context.Context, id string) (*model.MBoard, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "CPU.id":
		if e.complexity.CPU.ID == nil {
			break
		}

		return e.complexity.CPU.ID(childComplexity), true

	case "CPU.marca":
		if e.complexity.CPU.Marca == nil {
			break
		}

		return e.complexity.CPU.Marca(childComplexity), true

	case "CPU.maxRam":
		if e.complexity.CPU.MaxRAM == nil {
			break
		}

		return e.complexity.CPU.MaxRAM(childComplexity), true

	case "CPU.modelo":
		if e.complexity.CPU.Modelo == nil {
			break
		}

		return e.complexity.CPU.Modelo(childComplexity), true

	case "CPU.nucleos":
		if e.complexity.CPU.Nucleos == nil {
			break
		}

		return e.complexity.CPU.Nucleos(childComplexity), true

	case "CPU.tdp":
		if e.complexity.CPU.Tdp == nil {
			break
		}

		return e.complexity.CPU.Tdp(childComplexity), true

	case "CPU.velocidade":
		if e.complexity.CPU.Velocidade == nil {
			break
		}

		return e.complexity.CPU.Velocidade(childComplexity), true

	case "Camera.id":
		if e.complexity.Camera.ID == nil {
			break
		}

		return e.complexity.Camera.ID(childComplexity), true

	case "Camera.marca":
		if e.complexity.Camera.Marca == nil {
			break
		}

		return e.complexity.Camera.Marca(childComplexity), true

	case "Camera.modelo":
		if e.complexity.Camera.Modelo == nil {
			break
		}

		return e.complexity.Camera.Modelo(childComplexity), true

	case "ComponenteApagado.id":
		if e.complexity.ComponenteApagado.ID == nil {
			break
		}

		return e.complexity.ComponenteApagado.ID(childComplexity), true

	case "ComponenteApagado.marca":
		if e.complexity.ComponenteApagado.Marca == nil {
			break
		}

		return e.complexity.ComponenteApagado.Marca(childComplexity), true

	case "ComponenteApagado.modelo":
		if e.complexity.ComponenteApagado.Modelo == nil {
			break
		}

		return e.complexity.ComponenteApagado.Modelo(childComplexity), true

	case "ComponenteAtualizado.atualizacao":
		if e.complexity.ComponenteAtualizado.Atualizacao == nil {
			break
		}

		return e.complexity.ComponenteAtualizado.Atualizacao(childComplexity), true

	case "ComponenteAtualizado.id":
		if e.complexity.ComponenteAtualizado.ID == nil {
			break
		}

		return e.complexity.ComponenteAtualizado.ID(childComplexity), true

	case "ComponenteAtualizado.modelo":
		if e.complexity.ComponenteAtualizado.Modelo == nil {
			break
		}

		return e.complexity.ComponenteAtualizado.Modelo(childComplexity), true

	case "ComponenteCriado.id":
		if e.complexity.ComponenteCriado.ID == nil {
			break
		}

		return e.complexity.ComponenteCriado.ID(childComplexity), true

	case "ComponenteCriado.modelo":
		if e.complexity.ComponenteCriado.Modelo == nil {
			break
		}

		return e.complexity.ComponenteCriado.Modelo(childComplexity), true

	case "ComponenteCriado.tipoComponente":
		if e.complexity.ComponenteCriado.TipoComponente == nil {
			break
		}

		return e.complexity.ComponenteCriado.TipoComponente(childComplexity), true

	case "Computador.conectividade":
		if e.complexity.Computador.Conectividade == nil {
			break
		}

		return e.complexity.Computador.Conectividade(childComplexity), true

	case "Computador.equipamento":
		if e.complexity.Computador.Equipamento == nil {
			break
		}

		return e.complexity.Computador.Equipamento(childComplexity), true

	case "Computador.hardware":
		if e.complexity.Computador.Hardware == nil {
			break
		}

		return e.complexity.Computador.Hardware(childComplexity), true

	case "Computador.id":
		if e.complexity.Computador.ID == nil {
			break
		}

		return e.complexity.Computador.ID(childComplexity), true

	case "Computador.info":
		if e.complexity.Computador.Info == nil {
			break
		}

		return e.complexity.Computador.Info(childComplexity), true

	case "Computador.nome":
		if e.complexity.Computador.Nome == nil {
			break
		}

		return e.complexity.Computador.Nome(childComplexity), true

	case "Computador.perifericos":
		if e.complexity.Computador.Perifericos == nil {
			break
		}

		return e.complexity.Computador.Perifericos(childComplexity), true

	case "Computador.software":
		if e.complexity.Computador.Software == nil {
			break
		}

		return e.complexity.Computador.Software(childComplexity), true

	case "ComputadorAtualizado.atualizacao":
		if e.complexity.ComputadorAtualizado.Atualizacao == nil {
			break
		}

		return e.complexity.ComputadorAtualizado.Atualizacao(childComplexity), true

	case "ComputadorAtualizado.id":
		if e.complexity.ComputadorAtualizado.ID == nil {
			break
		}

		return e.complexity.ComputadorAtualizado.ID(childComplexity), true

	case "ComputadorAtualizado.nome":
		if e.complexity.ComputadorAtualizado.Nome == nil {
			break
		}

		return e.complexity.ComputadorAtualizado.Nome(childComplexity), true

	case "ComputadorCriado.id":
		if e.complexity.ComputadorCriado.ID == nil {
			break
		}

		return e.complexity.ComputadorCriado.ID(childComplexity), true

	case "ComputadorCriado.nome":
		if e.complexity.ComputadorCriado.Nome == nil {
			break
		}

		return e.complexity.ComputadorCriado.Nome(childComplexity), true

	case "Conectividade.conectadoDominio":
		if e.complexity.Conectividade.ConectadoDominio == nil {
			break
		}

		return e.complexity.Conectividade.ConectadoDominio(childComplexity), true

	case "Conectividade.ethernet":
		if e.complexity.Conectividade.Ethernet == nil {
			break
		}

		return e.complexity.Conectividade.Ethernet(childComplexity), true

	case "Conectividade.wifi":
		if e.complexity.Conectividade.Wifi == nil {
			break
		}

		return e.complexity.Conectividade.Wifi(childComplexity), true

	case "ConexoesMBoard.pcie3_16":
		if e.complexity.ConexoesMBoard.Pcie3_16 == nil {
			break
		}

		return e.complexity.ConexoesMBoard.Pcie3_16(childComplexity), true

	case "ConexoesMBoard.pcie4_16":
		if e.complexity.ConexoesMBoard.Pcie4_16 == nil {
			break
		}

		return e.complexity.ConexoesMBoard.Pcie4_16(childComplexity), true

	case "ConexoesMBoard.sata":
		if e.complexity.ConexoesMBoard.Sata == nil {
			break
		}

		return e.complexity.ConexoesMBoard.Sata(childComplexity), true

	case "EquipamentoExterno.camera":
		if e.complexity.EquipamentoExterno.Camera == nil {
			break
		}

		return e.complexity.EquipamentoExterno.Camera(childComplexity), true

	case "EquipamentoExterno.microfone":
		if e.complexity.EquipamentoExterno.Microfone == nil {
			break
		}

		return e.complexity.EquipamentoExterno.Microfone(childComplexity), true

	case "GPU.id":
		if e.complexity.Gpu.ID == nil {
			break
		}

		return e.complexity.Gpu.ID(childComplexity), true

	case "GPU.marca":
		if e.complexity.Gpu.Marca == nil {
			break
		}

		return e.complexity.Gpu.Marca(childComplexity), true

	case "GPU.modelo":
		if e.complexity.Gpu.Modelo == nil {
			break
		}

		return e.complexity.Gpu.Modelo(childComplexity), true

	case "GPU.saidas":
		if e.complexity.Gpu.Saidas == nil {
			break
		}

		return e.complexity.Gpu.Saidas(childComplexity), true

	case "GPU.tdp":
		if e.complexity.Gpu.Tdp == nil {
			break
		}

		return e.complexity.Gpu.Tdp(childComplexity), true

	case "GPU.velocidade":
		if e.complexity.Gpu.Velocidade == nil {
			break
		}

		return e.complexity.Gpu.Velocidade(childComplexity), true

	case "GPU.vram":
		if e.complexity.Gpu.Vram == nil {
			break
		}

		return e.complexity.Gpu.Vram(childComplexity), true

	case "HardwareInterno.cpuUtil":
		if e.complexity.HardwareInterno.CPUUtil == nil {
			break
		}

		return e.complexity.HardwareInterno.CPUUtil(childComplexity), true

	case "HardwareInterno.gpuUtil":
		if e.complexity.HardwareInterno.GpuUtil == nil {
			break
		}

		return e.complexity.HardwareInterno.GpuUtil(childComplexity), true

	case "HardwareInterno.ramMemoria":
		if e.complexity.HardwareInterno.RAMMemoria == nil {
			break
		}

		return e.complexity.HardwareInterno.RAMMemoria(childComplexity), true

	case "HardwareInterno.ramSlots":
		if e.complexity.HardwareInterno.RAMSlots == nil {
			break
		}

		return e.complexity.HardwareInterno.RAMSlots(childComplexity), true

	case "HardwareInterno.ramTipo":
		if e.complexity.HardwareInterno.RAMTipo == nil {
			break
		}

		return e.complexity.HardwareInterno.RAMTipo(childComplexity), true

	case "HardwareInterno.ramVelocidade":
		if e.complexity.HardwareInterno.RAMVelocidade == nil {
			break
		}

		return e.complexity.HardwareInterno.RAMVelocidade(childComplexity), true

	case "Informacao.dominio":
		if e.complexity.Informacao.Dominio == nil {
			break
		}

		return e.complexity.Informacao.Dominio(childComplexity), true

	case "Informacao.salaAtribuida":
		if e.complexity.Informacao.SalaAtribuida == nil {
			break
		}

		return e.complexity.Informacao.SalaAtribuida(childComplexity), true

	case "Informacao.sistemaOperativo":
		if e.complexity.Informacao.SistemaOperativo == nil {
			break
		}

		return e.complexity.Informacao.SistemaOperativo(childComplexity), true

	case "Informacao.tipoPc":
		if e.complexity.Informacao.TipoPc == nil {
			break
		}

		return e.complexity.Informacao.TipoPc(childComplexity), true

	case "Informacao.tipoUtilisacao":
		if e.complexity.Informacao.TipoUtilisacao == nil {
			break
		}

		return e.complexity.Informacao.TipoUtilisacao(childComplexity), true

	case "Informacao.ultimaInspecao":
		if e.complexity.Informacao.UltimaInspecao == nil {
			break
		}

		return e.complexity.Informacao.UltimaInspecao(childComplexity), true

	case "Informacao.utilisacao":
		if e.complexity.Informacao.Utilisacao == nil {
			break
		}

		return e.complexity.Informacao.Utilisacao(childComplexity), true

	case "InterfacesMBoard.audio":
		if e.complexity.InterfacesMBoard.Audio == nil {
			break
		}

		return e.complexity.InterfacesMBoard.Audio(childComplexity), true

	case "InterfacesMBoard.display":
		if e.complexity.InterfacesMBoard.Display == nil {
			break
		}

		return e.complexity.InterfacesMBoard.Display(childComplexity), true

	case "InterfacesMBoard.hdmi":
		if e.complexity.InterfacesMBoard.Hdmi == nil {
			break
		}

		return e.complexity.InterfacesMBoard.Hdmi(childComplexity), true

	case "InterfacesMBoard.lan":
		if e.complexity.InterfacesMBoard.Lan == nil {
			break
		}

		return e.complexity.InterfacesMBoard.Lan(childComplexity), true

	case "InterfacesMBoard.usb2":
		if e.complexity.InterfacesMBoard.Usb2 == nil {
			break
		}

		return e.complexity.InterfacesMBoard.Usb2(childComplexity), true

	case "InterfacesMBoard.usb3":
		if e.complexity.InterfacesMBoard.Usb3 == nil {
			break
		}

		return e.complexity.InterfacesMBoard.Usb3(childComplexity), true

	case "InterfacesMBoard.wifi":
		if e.complexity.InterfacesMBoard.Wifi == nil {
			break
		}

		return e.complexity.InterfacesMBoard.Wifi(childComplexity), true

	case "Item.id":
		if e.complexity.Item.ID == nil {
			break
		}

		return e.complexity.Item.ID(childComplexity), true

	case "Item.marca":
		if e.complexity.Item.Marca == nil {
			break
		}

		return e.complexity.Item.Marca(childComplexity), true

	case "Item.modelo":
		if e.complexity.Item.Modelo == nil {
			break
		}

		return e.complexity.Item.Modelo(childComplexity), true

	case "Item.nome":
		if e.complexity.Item.Nome == nil {
			break
		}

		return e.complexity.Item.Nome(childComplexity), true

	case "Item.paginaWeb":
		if e.complexity.Item.PaginaWeb == nil {
			break
		}

		return e.complexity.Item.PaginaWeb(childComplexity), true

	case "ItemAtualizado.atualizacao":
		if e.complexity.ItemAtualizado.Atualizacao == nil {
			break
		}

		return e.complexity.ItemAtualizado.Atualizacao(childComplexity), true

	case "ItemAtualizado.id":
		if e.complexity.ItemAtualizado.ID == nil {
			break
		}

		return e.complexity.ItemAtualizado.ID(childComplexity), true

	case "ItemAtualizado.modelo":
		if e.complexity.ItemAtualizado.Modelo == nil {
			break
		}

		return e.complexity.ItemAtualizado.Modelo(childComplexity), true

	case "ItemAtualizado.nome":
		if e.complexity.ItemAtualizado.Nome == nil {
			break
		}

		return e.complexity.ItemAtualizado.Nome(childComplexity), true

	case "ItemCriado.id":
		if e.complexity.ItemCriado.ID == nil {
			break
		}

		return e.complexity.ItemCriado.ID(childComplexity), true

	case "ItemCriado.nome":
		if e.complexity.ItemCriado.Nome == nil {
			break
		}

		return e.complexity.ItemCriado.Nome(childComplexity), true

	case "ListaHardware.armazenamento":
		if e.complexity.ListaHardware.Armazenamento == nil {
			break
		}

		return e.complexity.ListaHardware.Armazenamento(childComplexity), true

	case "ListaHardware.cpu":
		if e.complexity.ListaHardware.CPU == nil {
			break
		}

		return e.complexity.ListaHardware.CPU(childComplexity), true

	case "ListaHardware.gpu":
		if e.complexity.ListaHardware.Gpu == nil {
			break
		}

		return e.complexity.ListaHardware.Gpu(childComplexity), true

	case "ListaHardware.placaM":
		if e.complexity.ListaHardware.PlacaM == nil {
			break
		}

		return e.complexity.ListaHardware.PlacaM(childComplexity), true

	case "ListaHardware.ram":
		if e.complexity.ListaHardware.RAM == nil {
			break
		}

		return e.complexity.ListaHardware.RAM(childComplexity), true

	case "MBoard.chipset":
		if e.complexity.MBoard.Chipset == nil {
			break
		}

		return e.complexity.MBoard.Chipset(childComplexity), true

	case "MBoard.conexoes":
		if e.complexity.MBoard.Conexoes == nil {
			break
		}

		return e.complexity.MBoard.Conexoes(childComplexity), true

	case "MBoard.dimMaxMem":
		if e.complexity.MBoard.DimMaxMem == nil {
			break
		}

		return e.complexity.MBoard.DimMaxMem(childComplexity), true

	case "MBoard.dimMaxVelc":
		if e.complexity.MBoard.DimMaxVelc == nil {
			break
		}

		return e.complexity.MBoard.DimMaxVelc(childComplexity), true

	case "MBoard.dimMemType":
		if e.complexity.MBoard.DimMemType == nil {
			break
		}

		return e.complexity.MBoard.DimMemType(childComplexity), true

	case "MBoard.dimSlots":
		if e.complexity.MBoard.DimSlots == nil {
			break
		}

		return e.complexity.MBoard.DimSlots(childComplexity), true

	case "MBoard.familiaCompativel":
		if e.complexity.MBoard.FamiliaCompativel == nil {
			break
		}

		return e.complexity.MBoard.FamiliaCompativel(childComplexity), true

	case "MBoard.id":
		if e.complexity.MBoard.ID == nil {
			break
		}

		return e.complexity.MBoard.ID(childComplexity), true

	case "MBoard.interfaces":
		if e.complexity.MBoard.Interfaces == nil {
			break
		}

		return e.complexity.MBoard.Interfaces(childComplexity), true

	case "MBoard.marca":
		if e.complexity.MBoard.Marca == nil {
			break
		}

		return e.complexity.MBoard.Marca(childComplexity), true

	case "MBoard.modelo":
		if e.complexity.MBoard.Modelo == nil {
			break
		}

		return e.complexity.MBoard.Modelo(childComplexity), true

	case "MBoard.socket":
		if e.complexity.MBoard.Socket == nil {
			break
		}

		return e.complexity.MBoard.Socket(childComplexity), true

	case "MBoard.tipoMemoria":
		if e.complexity.MBoard.TipoMemoria == nil {
			break
		}

		return e.complexity.MBoard.TipoMemoria(childComplexity), true

	case "Microfone.id":
		if e.complexity.Microfone.ID == nil {
			break
		}

		return e.complexity.Microfone.ID(childComplexity), true

	case "Microfone.marca":
		if e.complexity.Microfone.Marca == nil {
			break
		}

		return e.complexity.Microfone.Marca(childComplexity), true

	case "Microfone.modelo":
		if e.complexity.Microfone.Modelo == nil {
			break
		}

		return e.complexity.Microfone.Modelo(childComplexity), true

	case "Mutation.ApagarComponente":
		if e.complexity.Mutation.ApagarComponente == nil {
			break
		}

		args, err := ec.field_Mutation_ApagarComponente_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ApagarComponente(childComplexity, args["id"].(string)), true

	case "Mutation.ApagarComputador":
		if e.complexity.Mutation.ApagarComputador == nil {
			break
		}

		args, err := ec.field_Mutation_ApagarComputador_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ApagarComputador(childComplexity, args["id"].(string)), true

	case "Mutation.ApagarItem":
		if e.complexity.Mutation.ApagarItem == nil {
			break
		}

		args, err := ec.field_Mutation_ApagarItem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ApagarItem(childComplexity, args["id"].(string)), true

	case "Mutation.ApagarSoftware":
		if e.complexity.Mutation.ApagarSoftware == nil {
			break
		}

		args, err := ec.field_Mutation_ApagarSoftware_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ApagarSoftware(childComplexity, args["id"].(string)), true

	case "Mutation.CriarCPU":
		if e.complexity.Mutation.CriarCPU == nil {
			break
		}

		args, err := ec.field_Mutation_CriarCPU_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CriarCPU(childComplexity, args["input"].(model.NovoCPU)), true

	case "Mutation.CriarCamera":
		if e.complexity.Mutation.CriarCamera == nil {
			break
		}

		args, err := ec.field_Mutation_CriarCamera_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CriarCamera(childComplexity, args["input"].(model.NovaCamera)), true

	case "Mutation.CriarComputador":
		if e.complexity.Mutation.CriarComputador == nil {
			break
		}

		args, err := ec.field_Mutation_CriarComputador_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CriarComputador(childComplexity, args["input"].(model.NovoComputador)), true

	case "Mutation.CriarGPU":
		if e.complexity.Mutation.CriarGpu == nil {
			break
		}

		args, err := ec.field_Mutation_CriarGPU_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CriarGpu(childComplexity, args["input"].(model.NovoGpu)), true

	case "Mutation.CriarItem":
		if e.complexity.Mutation.CriarItem == nil {
			break
		}

		args, err := ec.field_Mutation_CriarItem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CriarItem(childComplexity, args["input"].(model.NovoItem)), true

	case "Mutation.CriarMboard":
		if e.complexity.Mutation.CriarMboard == nil {
			break
		}

		args, err := ec.field_Mutation_CriarMboard_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CriarMboard(childComplexity, args["input"].(model.NovaMBoard)), true

	case "Mutation.CriarMicrofone":
		if e.complexity.Mutation.CriarMicrofone == nil {
			break
		}

		args, err := ec.field_Mutation_CriarMicrofone_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CriarMicrofone(childComplexity, args["input"].(model.NovoMicrofone)), true

	case "Mutation.CriarRAM":
		if e.complexity.Mutation.CriarRAM == nil {
			break
		}

		args, err := ec.field_Mutation_CriarRAM_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CriarRAM(childComplexity, args["input"].(model.NovoRAM)), true

	case "Mutation.CriarSoftware":
		if e.complexity.Mutation.CriarSoftware == nil {
			break
		}

		args, err := ec.field_Mutation_CriarSoftware_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CriarSoftware(childComplexity, args["input"].(model.NovoSoftware)), true

	case "Mutation.CriarStorage":
		if e.complexity.Mutation.CriarStorage == nil {
			break
		}

		args, err := ec.field_Mutation_CriarStorage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CriarStorage(childComplexity, args["input"].(model.NovoStorage)), true

	case "Mutation.UpdateCPU":
		if e.complexity.Mutation.UpdateCPU == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateCPU_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCPU(childComplexity, args["id"].(string), args["input"].(model.NovoCPU)), true

	case "Mutation.UpdateComputador":
		if e.complexity.Mutation.UpdateComputador == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateComputador_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateComputador(childComplexity, args["id"].(string), args["input"].(model.NovoComputador)), true

	case "Mutation.UpdateGPU":
		if e.complexity.Mutation.UpdateGpu == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateGPU_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateGpu(childComplexity, args["id"].(string), args["input"].(model.NovoGpu)), true

	case "Mutation.UpdateItem":
		if e.complexity.Mutation.UpdateItem == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateItem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateItem(childComplexity, args["id"].(string), args["input"].(model.NovoItem)), true

	case "Mutation.UpdateRAM":
		if e.complexity.Mutation.UpdateRAM == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateRAM_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRAM(childComplexity, args["id"].(string), args["input"].(model.NovoRAM)), true

	case "Mutation.UpdateSoftware":
		if e.complexity.Mutation.UpdateSoftware == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateSoftware_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSoftware(childComplexity, args["id"].(string), args["input"].(model.NovoSoftware)), true

	case "Query.GetCPU":
		if e.complexity.Query.GetCPU == nil {
			break
		}

		args, err := ec.field_Query_GetCPU_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCPU(childComplexity, args["id"].(string)), true

	case "Query.GetCPUS":
		if e.complexity.Query.GetCPUS == nil {
			break
		}

		return e.complexity.Query.GetCPUS(childComplexity), true

	case "Query.GetCamera":
		if e.complexity.Query.GetCamera == nil {
			break
		}

		args, err := ec.field_Query_GetCamera_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCamera(childComplexity, args["id"].(string)), true

	case "Query.GetCameras":
		if e.complexity.Query.GetCameras == nil {
			break
		}

		return e.complexity.Query.GetCameras(childComplexity), true

	case "Query.GetComputador":
		if e.complexity.Query.GetComputador == nil {
			break
		}

		args, err := ec.field_Query_GetComputador_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetComputador(childComplexity, args["id"].(string)), true

	case "Query.GetComputadores":
		if e.complexity.Query.GetComputadores == nil {
			break
		}

		return e.complexity.Query.GetComputadores(childComplexity), true

	case "Query.GetGPU":
		if e.complexity.Query.GetGpu == nil {
			break
		}

		args, err := ec.field_Query_GetGPU_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetGpu(childComplexity, args["id"].(string)), true

	case "Query.GetGPUS":
		if e.complexity.Query.GetGpus == nil {
			break
		}

		return e.complexity.Query.GetGpus(childComplexity), true

	case "Query.GetItem":
		if e.complexity.Query.GetItem == nil {
			break
		}

		args, err := ec.field_Query_GetItem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetItem(childComplexity, args["id"].(string)), true

	case "Query.GetItems":
		if e.complexity.Query.GetItems == nil {
			break
		}

		return e.complexity.Query.GetItems(childComplexity), true

	case "Query.GetMBoard":
		if e.complexity.Query.GetMBoard == nil {
			break
		}

		args, err := ec.field_Query_GetMBoard_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetMBoard(childComplexity, args["id"].(string)), true

	case "Query.GetMBoards":
		if e.complexity.Query.GetMBoards == nil {
			break
		}

		return e.complexity.Query.GetMBoards(childComplexity), true

	case "Query.GetMicrofone":
		if e.complexity.Query.GetMicrofone == nil {
			break
		}

		args, err := ec.field_Query_GetMicrofone_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetMicrofone(childComplexity, args["id"].(string)), true

	case "Query.GetMicrofones":
		if e.complexity.Query.GetMicrofones == nil {
			break
		}

		return e.complexity.Query.GetMicrofones(childComplexity), true

	case "Query.GetRAM":
		if e.complexity.Query.GetRAM == nil {
			break
		}

		args, err := ec.field_Query_GetRAM_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetRAM(childComplexity, args["id"].(string)), true

	case "Query.GetRAMS":
		if e.complexity.Query.GetRAMS == nil {
			break
		}

		return e.complexity.Query.GetRAMS(childComplexity), true

	case "Query.GetSoftware":
		if e.complexity.Query.GetSoftware == nil {
			break
		}

		args, err := ec.field_Query_GetSoftware_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSoftware(childComplexity, args["id"].(string)), true

	case "Query.GetSoftwares":
		if e.complexity.Query.GetSoftwares == nil {
			break
		}

		return e.complexity.Query.GetSoftwares(childComplexity), true

	case "Query.GetStorage":
		if e.complexity.Query.GetStorage == nil {
			break
		}

		args, err := ec.field_Query_GetStorage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetStorage(childComplexity, args["id"].(string)), true

	case "Query.GetStorages":
		if e.complexity.Query.GetStorages == nil {
			break
		}

		return e.complexity.Query.GetStorages(childComplexity), true

	case "RAM.id":
		if e.complexity.RAM.ID == nil {
			break
		}

		return e.complexity.RAM.ID(childComplexity), true

	case "RAM.marca":
		if e.complexity.RAM.Marca == nil {
			break
		}

		return e.complexity.RAM.Marca(childComplexity), true

	case "RAM.memoria":
		if e.complexity.RAM.Memoria == nil {
			break
		}

		return e.complexity.RAM.Memoria(childComplexity), true

	case "RAM.modelo":
		if e.complexity.RAM.Modelo == nil {
			break
		}

		return e.complexity.RAM.Modelo(childComplexity), true

	case "RAM.tipo":
		if e.complexity.RAM.Tipo == nil {
			break
		}

		return e.complexity.RAM.Tipo(childComplexity), true

	case "RAM.velocidade":
		if e.complexity.RAM.Velocidade == nil {
			break
		}

		return e.complexity.RAM.Velocidade(childComplexity), true

	case "RegistoApagado.id":
		if e.complexity.RegistoApagado.ID == nil {
			break
		}

		return e.complexity.RegistoApagado.ID(childComplexity), true

	case "RegistoApagado.nome":
		if e.complexity.RegistoApagado.Nome == nil {
			break
		}

		return e.complexity.RegistoApagado.Nome(childComplexity), true

	case "Software.nome":
		if e.complexity.Software.Nome == nil {
			break
		}

		return e.complexity.Software.Nome(childComplexity), true

	case "Software.tipo":
		if e.complexity.Software.Tipo == nil {
			break
		}

		return e.complexity.Software.Tipo(childComplexity), true

	case "SoftwareAtualizado.atualizacao":
		if e.complexity.SoftwareAtualizado.Atualizacao == nil {
			break
		}

		return e.complexity.SoftwareAtualizado.Atualizacao(childComplexity), true

	case "SoftwareAtualizado.id":
		if e.complexity.SoftwareAtualizado.ID == nil {
			break
		}

		return e.complexity.SoftwareAtualizado.ID(childComplexity), true

	case "SoftwareAtualizado.nome":
		if e.complexity.SoftwareAtualizado.Nome == nil {
			break
		}

		return e.complexity.SoftwareAtualizado.Nome(childComplexity), true

	case "SoftwareCriado.id":
		if e.complexity.SoftwareCriado.ID == nil {
			break
		}

		return e.complexity.SoftwareCriado.ID(childComplexity), true

	case "SoftwareCriado.nome":
		if e.complexity.SoftwareCriado.Nome == nil {
			break
		}

		return e.complexity.SoftwareCriado.Nome(childComplexity), true

	case "Storage.capacidade":
		if e.complexity.Storage.Capacidade == nil {
			break
		}

		return e.complexity.Storage.Capacidade(childComplexity), true

	case "Storage.id":
		if e.complexity.Storage.ID == nil {
			break
		}

		return e.complexity.Storage.ID(childComplexity), true

	case "Storage.marca":
		if e.complexity.Storage.Marca == nil {
			break
		}

		return e.complexity.Storage.Marca(childComplexity), true

	case "Storage.nome":
		if e.complexity.Storage.Nome == nil {
			break
		}

		return e.complexity.Storage.Nome(childComplexity), true

	case "Storage.tipo":
		if e.complexity.Storage.Tipo == nil {
			break
		}

		return e.complexity.Storage.Tipo(childComplexity), true

	case "Storage.velocidade":
		if e.complexity.Storage.Velocidade == nil {
			break
		}

		return e.complexity.Storage.Velocidade(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/schema.graphqls", Input: `# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Item {
  id: ID
  marca: String
  modelo: String
  nome: String
  paginaWeb: String
}

type Computador {
  id: ID
  nome: String
  info: Informacao
  conectividade: Conectividade
  equipamento: HardwareInterno
  hardware: ListaHardware
  perifericos: EquipamentoExterno
  software: [Software]
}

type Informacao {
  salaAtribuida: String
  ultimaInspecao: String
  tipoPc: String
  utilisacao: String
  tipoUtilisacao: String
  dominio: String
  sistemaOperativo: String
}

type Conectividade {
  ethernet: Boolean
  wifi: Boolean
  conectadoDominio: Boolean
}

type HardwareInterno {
  cpuUtil: String
  gpuUtil: String
  ramSlots: Int
  ramTipo: String
  ramVelocidade: String
  ramMemoria: String
}

type ListaHardware {
  cpu: CPU!
  gpu: GPU!
  ram: [RAM]!
  placaM: MBoard
  armazenamento: Storage
}

type Storage {
  id: ID!
  tipo: String
  nome: String
  marca: String
  velocidade: String
  capacidade: String
}

type CPU {
  id: ID!
  marca: String
  modelo: String
  nucleos: Int
  maxRam: Int
  velocidade: String
  tdp: Float
}

type GPU {
  id: ID!
  marca: String
  modelo: String
  vram: String
  velocidade: String
  saidas: String
  tdp: Float
}

type RAM {
  id: ID!
  marca: String
  modelo: String
  memoria: String
  velocidade: String
  tipo: String
}

type MBoard {
  id: ID!
  marca: String
  modelo: String
  tipoMemoria: String
  chipset: String
  familiaCompativel: String
  socket: String
  dimSlots: Int
  dimMaxMem: Int
  dimMemType: String
  dimMaxVelc: String
  conexoes: ConexoesMBoard
  interfaces: InterfacesMBoard
}

type ConexoesMBoard {
  sata: Int
  pcie4_16: Int
  pcie3_16: Int
}

type InterfacesMBoard {
  usb2: Int
  usb3: Int
  lan: Boolean
  display: Int
  hdmi: Int
  audio: Int
  wifi: Int
}

type EquipamentoExterno {
  camera: [Camera]
  microfone: [Microfone]
}

type Microfone {
  id: ID!
  marca: String
  modelo: String!
}

type Camera {
  id: ID!
  marca: String
  modelo: String!
}

type Software {
  nome: String!
  tipo: String
}

type SoftwareCriado {
  id: ID!
  nome: String

}

type ComputadorCriado{
  id: ID!
  nome: String
}

type ItemCriado {
  id: ID!
  nome: String
}

type ComponenteCriado {
  id: ID!
  tipoComponente: String!
  modelo: String
}

type ItemAtualizado {
  id: ID!
  nome: String!
  modelo: String
  atualizacao: String
}

type SoftwareAtualizado{
  id: ID!
  nome: String
  atualizacao: String
}

type ComputadorAtualizado {
  id: ID!
  nome: String
  atualizacao: String
}

type ComponenteAtualizado {
  id: ID!
  modelo: String
  atualizacao: String
}

type ComponenteApagado {
  id: ID!
  modelo: String
  marca: String
}

type RegistoApagado {
  id: ID!
  nome: String
}

type Query {
  GetComputadores: [Computador]!
  GetComputador(id: ID!): Computador

  GetCPUS: [CPU]!
  GetCPU(id: ID!): CPU
  
  GetGPUS: [GPU]!
  GetGPU(id: ID!): GPU
  
  GetRAMS: [RAM]!
  GetRAM(id: ID!): RAM

  GetItems: [Item!]!
  GetItem(id: ID!): Item

  GetSoftwares: [Software]!
  GetSoftware(id: ID!): Software

  GetMicrofones: [Microfone]!
  GetMicrofone(id: ID!): Microfone

  GetCameras: [Camera]!
  GetCamera(id: ID!): Camera
  
  GetStorages: [Storage]!
  GetStorage(id: ID!): Storage

  GetMBoards: [MBoard]!
  GetMBoard(id: ID!): MBoard
}

input NovoStorage {
  id: ID
  tipo: String
  nome: String
  modelo: String
  marca: String
  velocidade: String
  capacidade: String
}

input NovoComputador {
  id: ID
  nome: String!
  info: InputInformacao
  conectividade: InputConectividade
  equipamento: InputHardwareInterno
  hardware: InputListaHardware
  perifericos: InputEquipamentoExterno
  software: [NovoSoftware]
}

input InputInformacao {
  salaAtribuida: String
  ultimaInspecao: String
  tipoPc: String
  utilisacao: String
  tipoUtilisacao: String
  dominio: String
  sistemaOperativo: String
}

input InputConectividade {
  ethernet: Boolean
  wifi: Boolean
  conectadoDominio: Boolean
}

input InputEquipamentoExterno {
  camera: [NovaCamera]!
  microfone: [NovoMicrofone]!
}

input InputHardwareInterno {
  cpuUtil: String
  gpuUtil: String
  ramSlots: Int
  ramTipo: String
  ramVelocidade: String
  ramMemoria: String
}

input InputListaHardware {
  cpu: NovoCPU!
  gpu: NovoGPU!
  ram: [NovoRAM]!
  placaM: NovaMBoard
  armazenamento: NovoStorage
}

input NovoItem {
  id: ID
  marca: String
  modelo: String!
  nome: String
  paginaWeb: String
}

input NovoCPU {
  id: ID
  marca: String
  modelo: String!
  nucleos: Int
  maxRam: Int
  velocidade: String
  tdp: Float
}

input NovoGPU {
  id: ID
  marca: String
  modelo: String
  vram: String
  velocidade: String
  saidas: String
  tdp: Float
}

input NovoRAM {
  id: ID
  marca: String
  modelo: String
  memoria: String
  velocidade: String
  tipo: String
}

input NovaMBoard {
  id: ID
  marca: String
  modelo: String
  tipoMemoria: String
  chipset: String
  familiaCompativel: String
  socket: String
  dimSlots: Int
  dimMaxMem: Int
  dimMemType: String
  dimMaxVelc: String
  conexoes: String
  interfaces: String
}

input NovoSoftware {
  id: ID
  nome: String!
  tipo: String
}

input NovoMicrofone {
  id: ID
  marca: String
  modelo: String!
}

input NovaCamera {
  id: ID
  marca: String
  modelo: String!
}

type Mutation {
  UpdateComputador(id: ID!, input: NovoComputador!): ComputadorAtualizado
  UpdateGPU(id: ID!, input: NovoGPU!): ComponenteAtualizado
  UpdateCPU(id: ID!, input: NovoCPU!): ComponenteAtualizado
  UpdateRAM(id: ID!, input: NovoRAM!): ComponenteAtualizado
  UpdateItem(id: ID!, input: NovoItem!): ItemAtualizado
  UpdateSoftware(id: ID!, input: NovoSoftware!): SoftwareAtualizado

  CriarSoftware(input: NovoSoftware!): SoftwareCriado
  CriarComputador(input: NovoComputador!): ComputadorCriado
  CriarItem(input: NovoItem!): ItemCriado

  CriarCPU(input: NovoCPU!): ComponenteCriado
  CriarGPU(input: NovoGPU!): ComponenteCriado
  CriarRAM(input: NovoRAM!): ComponenteCriado
  CriarMboard(input: NovaMBoard!): ComponenteCriado
  CriarStorage(input: NovoStorage!): ComponenteCriado

  CriarMicrofone(input: NovoMicrofone!): ComponenteCriado
  CriarCamera(input: NovaCamera!): ComponenteCriado

  ApagarComponente(id: ID!): ComponenteApagado
  ApagarItem(id: ID!): RegistoApagado
  ApagarSoftware(id: ID!): RegistoApagado
  ApagarComputador(id: ID!): RegistoApagado
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_ApagarComponente_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ApagarComputador_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ApagarItem_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ApagarSoftware_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_CriarCPU_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NovoCPU
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNovoCPU2goᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoCPU(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_CriarCamera_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NovaCamera
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNovaCamera2goᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovaCamera(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_CriarComputador_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NovoComputador
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNovoComputador2goᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoComputador(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_CriarGPU_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NovoGpu
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNovoGPU2goᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoGpu(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_CriarItem_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NovoItem
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNovoItem2goᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoItem(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_CriarMboard_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NovaMBoard
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNovaMBoard2goᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovaMBoard(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_CriarMicrofone_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NovoMicrofone
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNovoMicrofone2goᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoMicrofone(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_CriarRAM_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NovoRAM
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNovoRAM2goᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoRAM(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_CriarSoftware_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NovoSoftware
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNovoSoftware2goᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoSoftware(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_CriarStorage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NovoStorage
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNovoStorage2goᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoStorage(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_UpdateCPU_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.NovoCPU
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNNovoCPU2goᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoCPU(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_UpdateComputador_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.NovoComputador
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNNovoComputador2goᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoComputador(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_UpdateGPU_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.NovoGpu
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNNovoGPU2goᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoGpu(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_UpdateItem_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.NovoItem
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNNovoItem2goᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoItem(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_UpdateRAM_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.NovoRAM
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNNovoRAM2goᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoRAM(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_UpdateSoftware_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.NovoSoftware
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNNovoSoftware2goᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoSoftware(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_GetCPU_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetCamera_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetComputador_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetGPU_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetItem_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetMBoard_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetMicrofone_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetRAM_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetSoftware_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetStorage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _CPU_id(ctx context.Context, field graphql.CollectedField, obj *model.CPU) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CPU",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CPU_marca(ctx context.Context, field graphql.CollectedField, obj *model.CPU) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CPU",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Marca, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CPU_modelo(ctx context.Context, field graphql.CollectedField, obj *model.CPU) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CPU",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modelo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CPU_nucleos(ctx context.Context, field graphql.CollectedField, obj *model.CPU) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CPU",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nucleos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CPU_maxRam(ctx context.Context, field graphql.CollectedField, obj *model.CPU) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CPU",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxRAM, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CPU_velocidade(ctx context.Context, field graphql.CollectedField, obj *model.CPU) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CPU",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Velocidade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CPU_tdp(ctx context.Context, field graphql.CollectedField, obj *model.CPU) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CPU",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tdp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Camera_id(ctx context.Context, field graphql.CollectedField, obj *model.Camera) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Camera",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Camera_marca(ctx context.Context, field graphql.CollectedField, obj *model.Camera) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Camera",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Marca, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Camera_modelo(ctx context.Context, field graphql.CollectedField, obj *model.Camera) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Camera",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modelo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponenteApagado_id(ctx context.Context, field graphql.CollectedField, obj *model.ComponenteApagado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponenteApagado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponenteApagado_modelo(ctx context.Context, field graphql.CollectedField, obj *model.ComponenteApagado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponenteApagado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modelo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponenteApagado_marca(ctx context.Context, field graphql.CollectedField, obj *model.ComponenteApagado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponenteApagado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Marca, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponenteAtualizado_id(ctx context.Context, field graphql.CollectedField, obj *model.ComponenteAtualizado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponenteAtualizado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponenteAtualizado_modelo(ctx context.Context, field graphql.CollectedField, obj *model.ComponenteAtualizado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponenteAtualizado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modelo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponenteAtualizado_atualizacao(ctx context.Context, field graphql.CollectedField, obj *model.ComponenteAtualizado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponenteAtualizado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Atualizacao, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponenteCriado_id(ctx context.Context, field graphql.CollectedField, obj *model.ComponenteCriado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponenteCriado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponenteCriado_tipoComponente(ctx context.Context, field graphql.CollectedField, obj *model.ComponenteCriado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponenteCriado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipoComponente, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ComponenteCriado_modelo(ctx context.Context, field graphql.CollectedField, obj *model.ComponenteCriado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComponenteCriado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modelo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Computador_id(ctx context.Context, field graphql.CollectedField, obj *model.Computador) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Computador",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Computador_nome(ctx context.Context, field graphql.CollectedField, obj *model.Computador) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Computador",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nome, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Computador_info(ctx context.Context, field graphql.CollectedField, obj *model.Computador) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Computador",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Info, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Informacao)
	fc.Result = res
	return ec.marshalOInformacao2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐInformacao(ctx, field.Selections, res)
}

func (ec *executionContext) _Computador_conectividade(ctx context.Context, field graphql.CollectedField, obj *model.Computador) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Computador",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Conectividade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Conectividade)
	fc.Result = res
	return ec.marshalOConectividade2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐConectividade(ctx, field.Selections, res)
}

func (ec *executionContext) _Computador_equipamento(ctx context.Context, field graphql.CollectedField, obj *model.Computador) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Computador",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Equipamento, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.HardwareInterno)
	fc.Result = res
	return ec.marshalOHardwareInterno2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐHardwareInterno(ctx, field.Selections, res)
}

func (ec *executionContext) _Computador_hardware(ctx context.Context, field graphql.CollectedField, obj *model.Computador) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Computador",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hardware, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListaHardware)
	fc.Result = res
	return ec.marshalOListaHardware2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐListaHardware(ctx, field.Selections, res)
}

func (ec *executionContext) _Computador_perifericos(ctx context.Context, field graphql.CollectedField, obj *model.Computador) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Computador",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Perifericos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EquipamentoExterno)
	fc.Result = res
	return ec.marshalOEquipamentoExterno2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐEquipamentoExterno(ctx, field.Selections, res)
}

func (ec *executionContext) _Computador_software(ctx context.Context, field graphql.CollectedField, obj *model.Computador) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Computador",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Software, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Software)
	fc.Result = res
	return ec.marshalOSoftware2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐSoftware(ctx, field.Selections, res)
}

func (ec *executionContext) _ComputadorAtualizado_id(ctx context.Context, field graphql.CollectedField, obj *model.ComputadorAtualizado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComputadorAtualizado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ComputadorAtualizado_nome(ctx context.Context, field graphql.CollectedField, obj *model.ComputadorAtualizado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComputadorAtualizado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nome, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ComputadorAtualizado_atualizacao(ctx context.Context, field graphql.CollectedField, obj *model.ComputadorAtualizado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComputadorAtualizado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Atualizacao, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ComputadorCriado_id(ctx context.Context, field graphql.CollectedField, obj *model.ComputadorCriado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComputadorCriado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ComputadorCriado_nome(ctx context.Context, field graphql.CollectedField, obj *model.ComputadorCriado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ComputadorCriado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nome, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Conectividade_ethernet(ctx context.Context, field graphql.CollectedField, obj *model.Conectividade) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Conectividade",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ethernet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Conectividade_wifi(ctx context.Context, field graphql.CollectedField, obj *model.Conectividade) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Conectividade",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wifi, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Conectividade_conectadoDominio(ctx context.Context, field graphql.CollectedField, obj *model.Conectividade) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Conectividade",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConectadoDominio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConexoesMBoard_sata(ctx context.Context, field graphql.CollectedField, obj *model.ConexoesMBoard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConexoesMBoard",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConexoesMBoard_pcie4_16(ctx context.Context, field graphql.CollectedField, obj *model.ConexoesMBoard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConexoesMBoard",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pcie4_16, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConexoesMBoard_pcie3_16(ctx context.Context, field graphql.CollectedField, obj *model.ConexoesMBoard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConexoesMBoard",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pcie3_16, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EquipamentoExterno_camera(ctx context.Context, field graphql.CollectedField, obj *model.EquipamentoExterno) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EquipamentoExterno",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Camera, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Camera)
	fc.Result = res
	return ec.marshalOCamera2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐCamera(ctx, field.Selections, res)
}

func (ec *executionContext) _EquipamentoExterno_microfone(ctx context.Context, field graphql.CollectedField, obj *model.EquipamentoExterno) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EquipamentoExterno",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Microfone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Microfone)
	fc.Result = res
	return ec.marshalOMicrofone2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐMicrofone(ctx, field.Selections, res)
}

func (ec *executionContext) _GPU_id(ctx context.Context, field graphql.CollectedField, obj *model.Gpu) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GPU",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GPU_marca(ctx context.Context, field graphql.CollectedField, obj *model.Gpu) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GPU",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Marca, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GPU_modelo(ctx context.Context, field graphql.CollectedField, obj *model.Gpu) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GPU",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modelo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GPU_vram(ctx context.Context, field graphql.CollectedField, obj *model.Gpu) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GPU",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vram, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GPU_velocidade(ctx context.Context, field graphql.CollectedField, obj *model.Gpu) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GPU",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Velocidade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GPU_saidas(ctx context.Context, field graphql.CollectedField, obj *model.Gpu) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GPU",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Saidas, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GPU_tdp(ctx context.Context, field graphql.CollectedField, obj *model.Gpu) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GPU",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tdp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _HardwareInterno_cpuUtil(ctx context.Context, field graphql.CollectedField, obj *model.HardwareInterno) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HardwareInterno",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CPUUtil, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HardwareInterno_gpuUtil(ctx context.Context, field graphql.CollectedField, obj *model.HardwareInterno) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HardwareInterno",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpuUtil, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HardwareInterno_ramSlots(ctx context.Context, field graphql.CollectedField, obj *model.HardwareInterno) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HardwareInterno",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RAMSlots, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _HardwareInterno_ramTipo(ctx context.Context, field graphql.CollectedField, obj *model.HardwareInterno) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HardwareInterno",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RAMTipo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HardwareInterno_ramVelocidade(ctx context.Context, field graphql.CollectedField, obj *model.HardwareInterno) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HardwareInterno",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RAMVelocidade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HardwareInterno_ramMemoria(ctx context.Context, field graphql.CollectedField, obj *model.HardwareInterno) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HardwareInterno",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RAMMemoria, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Informacao_salaAtribuida(ctx context.Context, field graphql.CollectedField, obj *model.Informacao) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Informacao",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SalaAtribuida, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Informacao_ultimaInspecao(ctx context.Context, field graphql.CollectedField, obj *model.Informacao) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Informacao",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UltimaInspecao, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Informacao_tipoPc(ctx context.Context, field graphql.CollectedField, obj *model.Informacao) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Informacao",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipoPc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Informacao_utilisacao(ctx context.Context, field graphql.CollectedField, obj *model.Informacao) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Informacao",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Utilisacao, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Informacao_tipoUtilisacao(ctx context.Context, field graphql.CollectedField, obj *model.Informacao) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Informacao",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipoUtilisacao, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Informacao_dominio(ctx context.Context, field graphql.CollectedField, obj *model.Informacao) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Informacao",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dominio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Informacao_sistemaOperativo(ctx context.Context, field graphql.CollectedField, obj *model.Informacao) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Informacao",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SistemaOperativo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _InterfacesMBoard_usb2(ctx context.Context, field graphql.CollectedField, obj *model.InterfacesMBoard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterfacesMBoard",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Usb2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _InterfacesMBoard_usb3(ctx context.Context, field graphql.CollectedField, obj *model.InterfacesMBoard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterfacesMBoard",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Usb3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _InterfacesMBoard_lan(ctx context.Context, field graphql.CollectedField, obj *model.InterfacesMBoard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterfacesMBoard",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lan, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _InterfacesMBoard_display(ctx context.Context, field graphql.CollectedField, obj *model.InterfacesMBoard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterfacesMBoard",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Display, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _InterfacesMBoard_hdmi(ctx context.Context, field graphql.CollectedField, obj *model.InterfacesMBoard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterfacesMBoard",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hdmi, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _InterfacesMBoard_audio(ctx context.Context, field graphql.CollectedField, obj *model.InterfacesMBoard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterfacesMBoard",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Audio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _InterfacesMBoard_wifi(ctx context.Context, field graphql.CollectedField, obj *model.InterfacesMBoard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InterfacesMBoard",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wifi, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_id(ctx context.Context, field graphql.CollectedField, obj *model.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_marca(ctx context.Context, field graphql.CollectedField, obj *model.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Marca, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_modelo(ctx context.Context, field graphql.CollectedField, obj *model.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modelo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_nome(ctx context.Context, field graphql.CollectedField, obj *model.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nome, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_paginaWeb(ctx context.Context, field graphql.CollectedField, obj *model.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaginaWeb, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ItemAtualizado_id(ctx context.Context, field graphql.CollectedField, obj *model.ItemAtualizado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ItemAtualizado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ItemAtualizado_nome(ctx context.Context, field graphql.CollectedField, obj *model.ItemAtualizado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ItemAtualizado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nome, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ItemAtualizado_modelo(ctx context.Context, field graphql.CollectedField, obj *model.ItemAtualizado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ItemAtualizado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modelo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ItemAtualizado_atualizacao(ctx context.Context, field graphql.CollectedField, obj *model.ItemAtualizado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ItemAtualizado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Atualizacao, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ItemCriado_id(ctx context.Context, field graphql.CollectedField, obj *model.ItemCriado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ItemCriado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ItemCriado_nome(ctx context.Context, field graphql.CollectedField, obj *model.ItemCriado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ItemCriado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nome, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ListaHardware_cpu(ctx context.Context, field graphql.CollectedField, obj *model.ListaHardware) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ListaHardware",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CPU, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CPU)
	fc.Result = res
	return ec.marshalNCPU2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐCPU(ctx, field.Selections, res)
}

func (ec *executionContext) _ListaHardware_gpu(ctx context.Context, field graphql.CollectedField, obj *model.ListaHardware) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ListaHardware",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gpu, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Gpu)
	fc.Result = res
	return ec.marshalNGPU2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐGpu(ctx, field.Selections, res)
}

func (ec *executionContext) _ListaHardware_ram(ctx context.Context, field graphql.CollectedField, obj *model.ListaHardware) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ListaHardware",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RAM, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.RAM)
	fc.Result = res
	return ec.marshalNRAM2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐRAM(ctx, field.Selections, res)
}

func (ec *executionContext) _ListaHardware_placaM(ctx context.Context, field graphql.CollectedField, obj *model.ListaHardware) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ListaHardware",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlacaM, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MBoard)
	fc.Result = res
	return ec.marshalOMBoard2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐMBoard(ctx, field.Selections, res)
}

func (ec *executionContext) _ListaHardware_armazenamento(ctx context.Context, field graphql.CollectedField, obj *model.ListaHardware) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ListaHardware",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Armazenamento, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Storage)
	fc.Result = res
	return ec.marshalOStorage2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐStorage(ctx, field.Selections, res)
}

func (ec *executionContext) _MBoard_id(ctx context.Context, field graphql.CollectedField, obj *model.MBoard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MBoard",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MBoard_marca(ctx context.Context, field graphql.CollectedField, obj *model.MBoard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MBoard",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Marca, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MBoard_modelo(ctx context.Context, field graphql.CollectedField, obj *model.MBoard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MBoard",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modelo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MBoard_tipoMemoria(ctx context.Context, field graphql.CollectedField, obj *model.MBoard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MBoard",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipoMemoria, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MBoard_chipset(ctx context.Context, field graphql.CollectedField, obj *model.MBoard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MBoard",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Chipset, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MBoard_familiaCompativel(ctx context.Context, field graphql.CollectedField, obj *model.MBoard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MBoard",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FamiliaCompativel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MBoard_socket(ctx context.Context, field graphql.CollectedField, obj *model.MBoard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MBoard",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Socket, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MBoard_dimSlots(ctx context.Context, field graphql.CollectedField, obj *model.MBoard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MBoard",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DimSlots, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MBoard_dimMaxMem(ctx context.Context, field graphql.CollectedField, obj *model.MBoard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MBoard",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DimMaxMem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MBoard_dimMemType(ctx context.Context, field graphql.CollectedField, obj *model.MBoard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MBoard",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DimMemType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MBoard_dimMaxVelc(ctx context.Context, field graphql.CollectedField, obj *model.MBoard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MBoard",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DimMaxVelc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MBoard_conexoes(ctx context.Context, field graphql.CollectedField, obj *model.MBoard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MBoard",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Conexoes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConexoesMBoard)
	fc.Result = res
	return ec.marshalOConexoesMBoard2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐConexoesMBoard(ctx, field.Selections, res)
}

func (ec *executionContext) _MBoard_interfaces(ctx context.Context, field graphql.CollectedField, obj *model.MBoard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MBoard",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.InterfacesMBoard)
	fc.Result = res
	return ec.marshalOInterfacesMBoard2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐInterfacesMBoard(ctx, field.Selections, res)
}

func (ec *executionContext) _Microfone_id(ctx context.Context, field graphql.CollectedField, obj *model.Microfone) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Microfone",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Microfone_marca(ctx context.Context, field graphql.CollectedField, obj *model.Microfone) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Microfone",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Marca, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Microfone_modelo(ctx context.Context, field graphql.CollectedField, obj *model.Microfone) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Microfone",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modelo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_UpdateComputador(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_UpdateComputador_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateComputador(rctx, args["id"].(string), args["input"].(model.NovoComputador))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ComputadorAtualizado)
	fc.Result = res
	return ec.marshalOComputadorAtualizado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐComputadorAtualizado(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_UpdateGPU(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_UpdateGPU_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateGpu(rctx, args["id"].(string), args["input"].(model.NovoGpu))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ComponenteAtualizado)
	fc.Result = res
	return ec.marshalOComponenteAtualizado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐComponenteAtualizado(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_UpdateCPU(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_UpdateCPU_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCPU(rctx, args["id"].(string), args["input"].(model.NovoCPU))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ComponenteAtualizado)
	fc.Result = res
	return ec.marshalOComponenteAtualizado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐComponenteAtualizado(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_UpdateRAM(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_UpdateRAM_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRAM(rctx, args["id"].(string), args["input"].(model.NovoRAM))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ComponenteAtualizado)
	fc.Result = res
	return ec.marshalOComponenteAtualizado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐComponenteAtualizado(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_UpdateItem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_UpdateItem_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateItem(rctx, args["id"].(string), args["input"].(model.NovoItem))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ItemAtualizado)
	fc.Result = res
	return ec.marshalOItemAtualizado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐItemAtualizado(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_UpdateSoftware(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_UpdateSoftware_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSoftware(rctx, args["id"].(string), args["input"].(model.NovoSoftware))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SoftwareAtualizado)
	fc.Result = res
	return ec.marshalOSoftwareAtualizado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐSoftwareAtualizado(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_CriarSoftware(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_CriarSoftware_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CriarSoftware(rctx, args["input"].(model.NovoSoftware))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SoftwareCriado)
	fc.Result = res
	return ec.marshalOSoftwareCriado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐSoftwareCriado(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_CriarComputador(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_CriarComputador_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CriarComputador(rctx, args["input"].(model.NovoComputador))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ComputadorCriado)
	fc.Result = res
	return ec.marshalOComputadorCriado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐComputadorCriado(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_CriarItem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_CriarItem_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CriarItem(rctx, args["input"].(model.NovoItem))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ItemCriado)
	fc.Result = res
	return ec.marshalOItemCriado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐItemCriado(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_CriarCPU(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_CriarCPU_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CriarCPU(rctx, args["input"].(model.NovoCPU))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ComponenteCriado)
	fc.Result = res
	return ec.marshalOComponenteCriado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐComponenteCriado(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_CriarGPU(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_CriarGPU_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CriarGpu(rctx, args["input"].(model.NovoGpu))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ComponenteCriado)
	fc.Result = res
	return ec.marshalOComponenteCriado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐComponenteCriado(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_CriarRAM(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_CriarRAM_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CriarRAM(rctx, args["input"].(model.NovoRAM))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ComponenteCriado)
	fc.Result = res
	return ec.marshalOComponenteCriado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐComponenteCriado(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_CriarMboard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_CriarMboard_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CriarMboard(rctx, args["input"].(model.NovaMBoard))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ComponenteCriado)
	fc.Result = res
	return ec.marshalOComponenteCriado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐComponenteCriado(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_CriarStorage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_CriarStorage_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CriarStorage(rctx, args["input"].(model.NovoStorage))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ComponenteCriado)
	fc.Result = res
	return ec.marshalOComponenteCriado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐComponenteCriado(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_CriarMicrofone(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_CriarMicrofone_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CriarMicrofone(rctx, args["input"].(model.NovoMicrofone))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ComponenteCriado)
	fc.Result = res
	return ec.marshalOComponenteCriado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐComponenteCriado(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_CriarCamera(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_CriarCamera_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CriarCamera(rctx, args["input"].(model.NovaCamera))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ComponenteCriado)
	fc.Result = res
	return ec.marshalOComponenteCriado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐComponenteCriado(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ApagarComponente(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ApagarComponente_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ApagarComponente(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ComponenteApagado)
	fc.Result = res
	return ec.marshalOComponenteApagado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐComponenteApagado(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ApagarItem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ApagarItem_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ApagarItem(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegistoApagado)
	fc.Result = res
	return ec.marshalORegistoApagado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐRegistoApagado(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ApagarSoftware(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ApagarSoftware_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ApagarSoftware(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegistoApagado)
	fc.Result = res
	return ec.marshalORegistoApagado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐRegistoApagado(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ApagarComputador(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ApagarComputador_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ApagarComputador(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegistoApagado)
	fc.Result = res
	return ec.marshalORegistoApagado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐRegistoApagado(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetComputadores(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetComputadores(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Computador)
	fc.Result = res
	return ec.marshalNComputador2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐComputador(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetComputador(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_GetComputador_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetComputador(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Computador)
	fc.Result = res
	return ec.marshalOComputador2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐComputador(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetCPUS(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCPUS(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CPU)
	fc.Result = res
	return ec.marshalNCPU2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐCPU(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetCPU(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_GetCPU_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCPU(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CPU)
	fc.Result = res
	return ec.marshalOCPU2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐCPU(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetGPUS(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetGpus(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Gpu)
	fc.Result = res
	return ec.marshalNGPU2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐGpu(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetGPU(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_GetGPU_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetGpu(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Gpu)
	fc.Result = res
	return ec.marshalOGPU2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐGpu(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetRAMS(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetRAMS(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.RAM)
	fc.Result = res
	return ec.marshalNRAM2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐRAM(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetRAM(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_GetRAM_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetRAM(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RAM)
	fc.Result = res
	return ec.marshalORAM2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐRAM(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetItems(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetItems(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Item)
	fc.Result = res
	return ec.marshalNItem2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetItem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_GetItem_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetItem(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Item)
	fc.Result = res
	return ec.marshalOItem2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐItem(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetSoftwares(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSoftwares(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Software)
	fc.Result = res
	return ec.marshalNSoftware2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐSoftware(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetSoftware(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_GetSoftware_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSoftware(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Software)
	fc.Result = res
	return ec.marshalOSoftware2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐSoftware(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetMicrofones(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetMicrofones(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Microfone)
	fc.Result = res
	return ec.marshalNMicrofone2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐMicrofone(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetMicrofone(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_GetMicrofone_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetMicrofone(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Microfone)
	fc.Result = res
	return ec.marshalOMicrofone2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐMicrofone(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetCameras(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCameras(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Camera)
	fc.Result = res
	return ec.marshalNCamera2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐCamera(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetCamera(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_GetCamera_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCamera(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Camera)
	fc.Result = res
	return ec.marshalOCamera2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐCamera(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetStorages(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetStorages(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Storage)
	fc.Result = res
	return ec.marshalNStorage2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐStorage(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetStorage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_GetStorage_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetStorage(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Storage)
	fc.Result = res
	return ec.marshalOStorage2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐStorage(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetMBoards(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetMBoards(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MBoard)
	fc.Result = res
	return ec.marshalNMBoard2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐMBoard(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetMBoard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_GetMBoard_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetMBoard(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MBoard)
	fc.Result = res
	return ec.marshalOMBoard2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐMBoard(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _RAM_id(ctx context.Context, field graphql.CollectedField, obj *model.RAM) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RAM",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RAM_marca(ctx context.Context, field graphql.CollectedField, obj *model.RAM) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RAM",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Marca, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RAM_modelo(ctx context.Context, field graphql.CollectedField, obj *model.RAM) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RAM",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modelo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RAM_memoria(ctx context.Context, field graphql.CollectedField, obj *model.RAM) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RAM",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Memoria, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RAM_velocidade(ctx context.Context, field graphql.CollectedField, obj *model.RAM) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RAM",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Velocidade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RAM_tipo(ctx context.Context, field graphql.CollectedField, obj *model.RAM) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RAM",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tipo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegistoApagado_id(ctx context.Context, field graphql.CollectedField, obj *model.RegistoApagado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegistoApagado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RegistoApagado_nome(ctx context.Context, field graphql.CollectedField, obj *model.RegistoApagado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegistoApagado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nome, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Software_nome(ctx context.Context, field graphql.CollectedField, obj *model.Software) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Software",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nome, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Software_tipo(ctx context.Context, field graphql.CollectedField, obj *model.Software) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Software",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tipo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SoftwareAtualizado_id(ctx context.Context, field graphql.CollectedField, obj *model.SoftwareAtualizado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SoftwareAtualizado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SoftwareAtualizado_nome(ctx context.Context, field graphql.CollectedField, obj *model.SoftwareAtualizado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SoftwareAtualizado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nome, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SoftwareAtualizado_atualizacao(ctx context.Context, field graphql.CollectedField, obj *model.SoftwareAtualizado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SoftwareAtualizado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Atualizacao, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SoftwareCriado_id(ctx context.Context, field graphql.CollectedField, obj *model.SoftwareCriado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SoftwareCriado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SoftwareCriado_nome(ctx context.Context, field graphql.CollectedField, obj *model.SoftwareCriado) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SoftwareCriado",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nome, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Storage_id(ctx context.Context, field graphql.CollectedField, obj *model.Storage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Storage_tipo(ctx context.Context, field graphql.CollectedField, obj *model.Storage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tipo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Storage_nome(ctx context.Context, field graphql.CollectedField, obj *model.Storage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nome, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Storage_marca(ctx context.Context, field graphql.CollectedField, obj *model.Storage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Marca, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Storage_velocidade(ctx context.Context, field graphql.CollectedField, obj *model.Storage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Velocidade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Storage_capacidade(ctx context.Context, field graphql.CollectedField, obj *model.Storage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Storage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Capacidade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputInputConectividade(ctx context.Context, obj interface{}) (model.InputConectividade, error) {
	var it model.InputConectividade
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "ethernet":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ethernet"))
			it.Ethernet, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "wifi":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wifi"))
			it.Wifi, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "conectadoDominio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conectadoDominio"))
			it.ConectadoDominio, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputEquipamentoExterno(ctx context.Context, obj interface{}) (model.InputEquipamentoExterno, error) {
	var it model.InputEquipamentoExterno
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "camera":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera"))
			it.Camera, err = ec.unmarshalNNovaCamera2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovaCamera(ctx, v)
			if err != nil {
				return it, err
			}
		case "microfone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("microfone"))
			it.Microfone, err = ec.unmarshalNNovoMicrofone2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoMicrofone(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputHardwareInterno(ctx context.Context, obj interface{}) (model.InputHardwareInterno, error) {
	var it model.InputHardwareInterno
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "cpuUtil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuUtil"))
			it.CPUUtil, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gpuUtil":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gpuUtil"))
			it.GpuUtil, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ramSlots":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ramSlots"))
			it.RAMSlots, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ramTipo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ramTipo"))
			it.RAMTipo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ramVelocidade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ramVelocidade"))
			it.RAMVelocidade, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ramMemoria":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ramMemoria"))
			it.RAMMemoria, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputInformacao(ctx context.Context, obj interface{}) (model.InputInformacao, error) {
	var it model.InputInformacao
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "salaAtribuida":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salaAtribuida"))
			it.SalaAtribuida, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ultimaInspecao":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ultimaInspecao"))
			it.UltimaInspecao, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tipoPc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tipoPc"))
			it.TipoPc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "utilisacao":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("utilisacao"))
			it.Utilisacao, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tipoUtilisacao":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tipoUtilisacao"))
			it.TipoUtilisacao, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dominio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dominio"))
			it.Dominio, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sistemaOperativo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sistemaOperativo"))
			it.SistemaOperativo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputListaHardware(ctx context.Context, obj interface{}) (model.InputListaHardware, error) {
	var it model.InputListaHardware
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "cpu":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpu"))
			it.CPU, err = ec.unmarshalNNovoCPU2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoCPU(ctx, v)
			if err != nil {
				return it, err
			}
		case "gpu":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gpu"))
			it.Gpu, err = ec.unmarshalNNovoGPU2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoGpu(ctx, v)
			if err != nil {
				return it, err
			}
		case "ram":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ram"))
			it.RAM, err = ec.unmarshalNNovoRAM2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoRAM(ctx, v)
			if err != nil {
				return it, err
			}
		case "placaM":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("placaM"))
			it.PlacaM, err = ec.unmarshalONovaMBoard2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovaMBoard(ctx, v)
			if err != nil {
				return it, err
			}
		case "armazenamento":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("armazenamento"))
			it.Armazenamento, err = ec.unmarshalONovoStorage2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoStorage(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNovaCamera(ctx context.Context, obj interface{}) (model.NovaCamera, error) {
	var it model.NovaCamera
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "marca":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marca"))
			it.Marca, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "modelo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelo"))
			it.Modelo, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNovaMBoard(ctx context.Context, obj interface{}) (model.NovaMBoard, error) {
	var it model.NovaMBoard
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "marca":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marca"))
			it.Marca, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "modelo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelo"))
			it.Modelo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tipoMemoria":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tipoMemoria"))
			it.TipoMemoria, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "chipset":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("chipset"))
			it.Chipset, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "familiaCompativel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("familiaCompativel"))
			it.FamiliaCompativel, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "socket":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("socket"))
			it.Socket, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dimSlots":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dimSlots"))
			it.DimSlots, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "dimMaxMem":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dimMaxMem"))
			it.DimMaxMem, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "dimMemType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dimMemType"))
			it.DimMemType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dimMaxVelc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dimMaxVelc"))
			it.DimMaxVelc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "conexoes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conexoes"))
			it.Conexoes, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "interfaces":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interfaces"))
			it.Interfaces, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNovoCPU(ctx context.Context, obj interface{}) (model.NovoCPU, error) {
	var it model.NovoCPU
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "marca":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marca"))
			it.Marca, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "modelo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelo"))
			it.Modelo, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "nucleos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nucleos"))
			it.Nucleos, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "maxRam":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxRam"))
			it.MaxRAM, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "velocidade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("velocidade"))
			it.Velocidade, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tdp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tdp"))
			it.Tdp, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNovoComputador(ctx context.Context, obj interface{}) (model.NovoComputador, error) {
	var it model.NovoComputador
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nome":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nome"))
			it.Nome, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "info":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("info"))
			it.Info, err = ec.unmarshalOInputInformacao2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐInputInformacao(ctx, v)
			if err != nil {
				return it, err
			}
		case "conectividade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conectividade"))
			it.Conectividade, err = ec.unmarshalOInputConectividade2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐInputConectividade(ctx, v)
			if err != nil {
				return it, err
			}
		case "equipamento":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equipamento"))
			it.Equipamento, err = ec.unmarshalOInputHardwareInterno2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐInputHardwareInterno(ctx, v)
			if err != nil {
				return it, err
			}
		case "hardware":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hardware"))
			it.Hardware, err = ec.unmarshalOInputListaHardware2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐInputListaHardware(ctx, v)
			if err != nil {
				return it, err
			}
		case "perifericos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perifericos"))
			it.Perifericos, err = ec.unmarshalOInputEquipamentoExterno2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐInputEquipamentoExterno(ctx, v)
			if err != nil {
				return it, err
			}
		case "software":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("software"))
			it.Software, err = ec.unmarshalONovoSoftware2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoSoftware(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNovoGPU(ctx context.Context, obj interface{}) (model.NovoGpu, error) {
	var it model.NovoGpu
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "marca":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marca"))
			it.Marca, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "modelo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelo"))
			it.Modelo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vram":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vram"))
			it.Vram, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "velocidade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("velocidade"))
			it.Velocidade, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "saidas":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("saidas"))
			it.Saidas, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tdp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tdp"))
			it.Tdp, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNovoItem(ctx context.Context, obj interface{}) (model.NovoItem, error) {
	var it model.NovoItem
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "marca":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marca"))
			it.Marca, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "modelo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelo"))
			it.Modelo, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "nome":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nome"))
			it.Nome, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paginaWeb":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paginaWeb"))
			it.PaginaWeb, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNovoMicrofone(ctx context.Context, obj interface{}) (model.NovoMicrofone, error) {
	var it model.NovoMicrofone
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "marca":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marca"))
			it.Marca, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "modelo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelo"))
			it.Modelo, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNovoRAM(ctx context.Context, obj interface{}) (model.NovoRAM, error) {
	var it model.NovoRAM
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "marca":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marca"))
			it.Marca, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "modelo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelo"))
			it.Modelo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "memoria":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memoria"))
			it.Memoria, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "velocidade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("velocidade"))
			it.Velocidade, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tipo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tipo"))
			it.Tipo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNovoSoftware(ctx context.Context, obj interface{}) (model.NovoSoftware, error) {
	var it model.NovoSoftware
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nome":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nome"))
			it.Nome, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "tipo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tipo"))
			it.Tipo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNovoStorage(ctx context.Context, obj interface{}) (model.NovoStorage, error) {
	var it model.NovoStorage
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tipo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tipo"))
			it.Tipo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nome":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nome"))
			it.Nome, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "modelo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelo"))
			it.Modelo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "marca":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marca"))
			it.Marca, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "velocidade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("velocidade"))
			it.Velocidade, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "capacidade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("capacidade"))
			it.Capacidade, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var cPUImplementors = []string{"CPU"}

func (ec *executionContext) _CPU(ctx context.Context, sel ast.SelectionSet, obj *model.CPU) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cPUImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CPU")
		case "id":
			out.Values[i] = ec._CPU_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "marca":
			out.Values[i] = ec._CPU_marca(ctx, field, obj)
		case "modelo":
			out.Values[i] = ec._CPU_modelo(ctx, field, obj)
		case "nucleos":
			out.Values[i] = ec._CPU_nucleos(ctx, field, obj)
		case "maxRam":
			out.Values[i] = ec._CPU_maxRam(ctx, field, obj)
		case "velocidade":
			out.Values[i] = ec._CPU_velocidade(ctx, field, obj)
		case "tdp":
			out.Values[i] = ec._CPU_tdp(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cameraImplementors = []string{"Camera"}

func (ec *executionContext) _Camera(ctx context.Context, sel ast.SelectionSet, obj *model.Camera) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cameraImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Camera")
		case "id":
			out.Values[i] = ec._Camera_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "marca":
			out.Values[i] = ec._Camera_marca(ctx, field, obj)
		case "modelo":
			out.Values[i] = ec._Camera_modelo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var componenteApagadoImplementors = []string{"ComponenteApagado"}

func (ec *executionContext) _ComponenteApagado(ctx context.Context, sel ast.SelectionSet, obj *model.ComponenteApagado) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, componenteApagadoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComponenteApagado")
		case "id":
			out.Values[i] = ec._ComponenteApagado_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "modelo":
			out.Values[i] = ec._ComponenteApagado_modelo(ctx, field, obj)
		case "marca":
			out.Values[i] = ec._ComponenteApagado_marca(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var componenteAtualizadoImplementors = []string{"ComponenteAtualizado"}

func (ec *executionContext) _ComponenteAtualizado(ctx context.Context, sel ast.SelectionSet, obj *model.ComponenteAtualizado) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, componenteAtualizadoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComponenteAtualizado")
		case "id":
			out.Values[i] = ec._ComponenteAtualizado_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "modelo":
			out.Values[i] = ec._ComponenteAtualizado_modelo(ctx, field, obj)
		case "atualizacao":
			out.Values[i] = ec._ComponenteAtualizado_atualizacao(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var componenteCriadoImplementors = []string{"ComponenteCriado"}

func (ec *executionContext) _ComponenteCriado(ctx context.Context, sel ast.SelectionSet, obj *model.ComponenteCriado) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, componenteCriadoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComponenteCriado")
		case "id":
			out.Values[i] = ec._ComponenteCriado_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tipoComponente":
			out.Values[i] = ec._ComponenteCriado_tipoComponente(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "modelo":
			out.Values[i] = ec._ComponenteCriado_modelo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var computadorImplementors = []string{"Computador"}

func (ec *executionContext) _Computador(ctx context.Context, sel ast.SelectionSet, obj *model.Computador) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, computadorImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Computador")
		case "id":
			out.Values[i] = ec._Computador_id(ctx, field, obj)
		case "nome":
			out.Values[i] = ec._Computador_nome(ctx, field, obj)
		case "info":
			out.Values[i] = ec._Computador_info(ctx, field, obj)
		case "conectividade":
			out.Values[i] = ec._Computador_conectividade(ctx, field, obj)
		case "equipamento":
			out.Values[i] = ec._Computador_equipamento(ctx, field, obj)
		case "hardware":
			out.Values[i] = ec._Computador_hardware(ctx, field, obj)
		case "perifericos":
			out.Values[i] = ec._Computador_perifericos(ctx, field, obj)
		case "software":
			out.Values[i] = ec._Computador_software(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var computadorAtualizadoImplementors = []string{"ComputadorAtualizado"}

func (ec *executionContext) _ComputadorAtualizado(ctx context.Context, sel ast.SelectionSet, obj *model.ComputadorAtualizado) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, computadorAtualizadoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComputadorAtualizado")
		case "id":
			out.Values[i] = ec._ComputadorAtualizado_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nome":
			out.Values[i] = ec._ComputadorAtualizado_nome(ctx, field, obj)
		case "atualizacao":
			out.Values[i] = ec._ComputadorAtualizado_atualizacao(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var computadorCriadoImplementors = []string{"ComputadorCriado"}

func (ec *executionContext) _ComputadorCriado(ctx context.Context, sel ast.SelectionSet, obj *model.ComputadorCriado) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, computadorCriadoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComputadorCriado")
		case "id":
			out.Values[i] = ec._ComputadorCriado_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nome":
			out.Values[i] = ec._ComputadorCriado_nome(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var conectividadeImplementors = []string{"Conectividade"}

func (ec *executionContext) _Conectividade(ctx context.Context, sel ast.SelectionSet, obj *model.Conectividade) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, conectividadeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Conectividade")
		case "ethernet":
			out.Values[i] = ec._Conectividade_ethernet(ctx, field, obj)
		case "wifi":
			out.Values[i] = ec._Conectividade_wifi(ctx, field, obj)
		case "conectadoDominio":
			out.Values[i] = ec._Conectividade_conectadoDominio(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var conexoesMBoardImplementors = []string{"ConexoesMBoard"}

func (ec *executionContext) _ConexoesMBoard(ctx context.Context, sel ast.SelectionSet, obj *model.ConexoesMBoard) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, conexoesMBoardImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConexoesMBoard")
		case "sata":
			out.Values[i] = ec._ConexoesMBoard_sata(ctx, field, obj)
		case "pcie4_16":
			out.Values[i] = ec._ConexoesMBoard_pcie4_16(ctx, field, obj)
		case "pcie3_16":
			out.Values[i] = ec._ConexoesMBoard_pcie3_16(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var equipamentoExternoImplementors = []string{"EquipamentoExterno"}

func (ec *executionContext) _EquipamentoExterno(ctx context.Context, sel ast.SelectionSet, obj *model.EquipamentoExterno) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, equipamentoExternoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EquipamentoExterno")
		case "camera":
			out.Values[i] = ec._EquipamentoExterno_camera(ctx, field, obj)
		case "microfone":
			out.Values[i] = ec._EquipamentoExterno_microfone(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var gPUImplementors = []string{"GPU"}

func (ec *executionContext) _GPU(ctx context.Context, sel ast.SelectionSet, obj *model.Gpu) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gPUImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GPU")
		case "id":
			out.Values[i] = ec._GPU_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "marca":
			out.Values[i] = ec._GPU_marca(ctx, field, obj)
		case "modelo":
			out.Values[i] = ec._GPU_modelo(ctx, field, obj)
		case "vram":
			out.Values[i] = ec._GPU_vram(ctx, field, obj)
		case "velocidade":
			out.Values[i] = ec._GPU_velocidade(ctx, field, obj)
		case "saidas":
			out.Values[i] = ec._GPU_saidas(ctx, field, obj)
		case "tdp":
			out.Values[i] = ec._GPU_tdp(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hardwareInternoImplementors = []string{"HardwareInterno"}

func (ec *executionContext) _HardwareInterno(ctx context.Context, sel ast.SelectionSet, obj *model.HardwareInterno) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hardwareInternoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HardwareInterno")
		case "cpuUtil":
			out.Values[i] = ec._HardwareInterno_cpuUtil(ctx, field, obj)
		case "gpuUtil":
			out.Values[i] = ec._HardwareInterno_gpuUtil(ctx, field, obj)
		case "ramSlots":
			out.Values[i] = ec._HardwareInterno_ramSlots(ctx, field, obj)
		case "ramTipo":
			out.Values[i] = ec._HardwareInterno_ramTipo(ctx, field, obj)
		case "ramVelocidade":
			out.Values[i] = ec._HardwareInterno_ramVelocidade(ctx, field, obj)
		case "ramMemoria":
			out.Values[i] = ec._HardwareInterno_ramMemoria(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var informacaoImplementors = []string{"Informacao"}

func (ec *executionContext) _Informacao(ctx context.Context, sel ast.SelectionSet, obj *model.Informacao) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, informacaoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Informacao")
		case "salaAtribuida":
			out.Values[i] = ec._Informacao_salaAtribuida(ctx, field, obj)
		case "ultimaInspecao":
			out.Values[i] = ec._Informacao_ultimaInspecao(ctx, field, obj)
		case "tipoPc":
			out.Values[i] = ec._Informacao_tipoPc(ctx, field, obj)
		case "utilisacao":
			out.Values[i] = ec._Informacao_utilisacao(ctx, field, obj)
		case "tipoUtilisacao":
			out.Values[i] = ec._Informacao_tipoUtilisacao(ctx, field, obj)
		case "dominio":
			out.Values[i] = ec._Informacao_dominio(ctx, field, obj)
		case "sistemaOperativo":
			out.Values[i] = ec._Informacao_sistemaOperativo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var interfacesMBoardImplementors = []string{"InterfacesMBoard"}

func (ec *executionContext) _InterfacesMBoard(ctx context.Context, sel ast.SelectionSet, obj *model.InterfacesMBoard) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, interfacesMBoardImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InterfacesMBoard")
		case "usb2":
			out.Values[i] = ec._InterfacesMBoard_usb2(ctx, field, obj)
		case "usb3":
			out.Values[i] = ec._InterfacesMBoard_usb3(ctx, field, obj)
		case "lan":
			out.Values[i] = ec._InterfacesMBoard_lan(ctx, field, obj)
		case "display":
			out.Values[i] = ec._InterfacesMBoard_display(ctx, field, obj)
		case "hdmi":
			out.Values[i] = ec._InterfacesMBoard_hdmi(ctx, field, obj)
		case "audio":
			out.Values[i] = ec._InterfacesMBoard_audio(ctx, field, obj)
		case "wifi":
			out.Values[i] = ec._InterfacesMBoard_wifi(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var itemImplementors = []string{"Item"}

func (ec *executionContext) _Item(ctx context.Context, sel ast.SelectionSet, obj *model.Item) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, itemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Item")
		case "id":
			out.Values[i] = ec._Item_id(ctx, field, obj)
		case "marca":
			out.Values[i] = ec._Item_marca(ctx, field, obj)
		case "modelo":
			out.Values[i] = ec._Item_modelo(ctx, field, obj)
		case "nome":
			out.Values[i] = ec._Item_nome(ctx, field, obj)
		case "paginaWeb":
			out.Values[i] = ec._Item_paginaWeb(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var itemAtualizadoImplementors = []string{"ItemAtualizado"}

func (ec *executionContext) _ItemAtualizado(ctx context.Context, sel ast.SelectionSet, obj *model.ItemAtualizado) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, itemAtualizadoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ItemAtualizado")
		case "id":
			out.Values[i] = ec._ItemAtualizado_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nome":
			out.Values[i] = ec._ItemAtualizado_nome(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "modelo":
			out.Values[i] = ec._ItemAtualizado_modelo(ctx, field, obj)
		case "atualizacao":
			out.Values[i] = ec._ItemAtualizado_atualizacao(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var itemCriadoImplementors = []string{"ItemCriado"}

func (ec *executionContext) _ItemCriado(ctx context.Context, sel ast.SelectionSet, obj *model.ItemCriado) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, itemCriadoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ItemCriado")
		case "id":
			out.Values[i] = ec._ItemCriado_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nome":
			out.Values[i] = ec._ItemCriado_nome(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var listaHardwareImplementors = []string{"ListaHardware"}

func (ec *executionContext) _ListaHardware(ctx context.Context, sel ast.SelectionSet, obj *model.ListaHardware) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listaHardwareImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListaHardware")
		case "cpu":
			out.Values[i] = ec._ListaHardware_cpu(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "gpu":
			out.Values[i] = ec._ListaHardware_gpu(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ram":
			out.Values[i] = ec._ListaHardware_ram(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "placaM":
			out.Values[i] = ec._ListaHardware_placaM(ctx, field, obj)
		case "armazenamento":
			out.Values[i] = ec._ListaHardware_armazenamento(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mBoardImplementors = []string{"MBoard"}

func (ec *executionContext) _MBoard(ctx context.Context, sel ast.SelectionSet, obj *model.MBoard) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mBoardImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MBoard")
		case "id":
			out.Values[i] = ec._MBoard_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "marca":
			out.Values[i] = ec._MBoard_marca(ctx, field, obj)
		case "modelo":
			out.Values[i] = ec._MBoard_modelo(ctx, field, obj)
		case "tipoMemoria":
			out.Values[i] = ec._MBoard_tipoMemoria(ctx, field, obj)
		case "chipset":
			out.Values[i] = ec._MBoard_chipset(ctx, field, obj)
		case "familiaCompativel":
			out.Values[i] = ec._MBoard_familiaCompativel(ctx, field, obj)
		case "socket":
			out.Values[i] = ec._MBoard_socket(ctx, field, obj)
		case "dimSlots":
			out.Values[i] = ec._MBoard_dimSlots(ctx, field, obj)
		case "dimMaxMem":
			out.Values[i] = ec._MBoard_dimMaxMem(ctx, field, obj)
		case "dimMemType":
			out.Values[i] = ec._MBoard_dimMemType(ctx, field, obj)
		case "dimMaxVelc":
			out.Values[i] = ec._MBoard_dimMaxVelc(ctx, field, obj)
		case "conexoes":
			out.Values[i] = ec._MBoard_conexoes(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec._MBoard_interfaces(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var microfoneImplementors = []string{"Microfone"}

func (ec *executionContext) _Microfone(ctx context.Context, sel ast.SelectionSet, obj *model.Microfone) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, microfoneImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Microfone")
		case "id":
			out.Values[i] = ec._Microfone_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "marca":
			out.Values[i] = ec._Microfone_marca(ctx, field, obj)
		case "modelo":
			out.Values[i] = ec._Microfone_modelo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "UpdateComputador":
			out.Values[i] = ec._Mutation_UpdateComputador(ctx, field)
		case "UpdateGPU":
			out.Values[i] = ec._Mutation_UpdateGPU(ctx, field)
		case "UpdateCPU":
			out.Values[i] = ec._Mutation_UpdateCPU(ctx, field)
		case "UpdateRAM":
			out.Values[i] = ec._Mutation_UpdateRAM(ctx, field)
		case "UpdateItem":
			out.Values[i] = ec._Mutation_UpdateItem(ctx, field)
		case "UpdateSoftware":
			out.Values[i] = ec._Mutation_UpdateSoftware(ctx, field)
		case "CriarSoftware":
			out.Values[i] = ec._Mutation_CriarSoftware(ctx, field)
		case "CriarComputador":
			out.Values[i] = ec._Mutation_CriarComputador(ctx, field)
		case "CriarItem":
			out.Values[i] = ec._Mutation_CriarItem(ctx, field)
		case "CriarCPU":
			out.Values[i] = ec._Mutation_CriarCPU(ctx, field)
		case "CriarGPU":
			out.Values[i] = ec._Mutation_CriarGPU(ctx, field)
		case "CriarRAM":
			out.Values[i] = ec._Mutation_CriarRAM(ctx, field)
		case "CriarMboard":
			out.Values[i] = ec._Mutation_CriarMboard(ctx, field)
		case "CriarStorage":
			out.Values[i] = ec._Mutation_CriarStorage(ctx, field)
		case "CriarMicrofone":
			out.Values[i] = ec._Mutation_CriarMicrofone(ctx, field)
		case "CriarCamera":
			out.Values[i] = ec._Mutation_CriarCamera(ctx, field)
		case "ApagarComponente":
			out.Values[i] = ec._Mutation_ApagarComponente(ctx, field)
		case "ApagarItem":
			out.Values[i] = ec._Mutation_ApagarItem(ctx, field)
		case "ApagarSoftware":
			out.Values[i] = ec._Mutation_ApagarSoftware(ctx, field)
		case "ApagarComputador":
			out.Values[i] = ec._Mutation_ApagarComputador(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "GetComputadores":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetComputadores(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "GetComputador":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetComputador(ctx, field)
				return res
			})
		case "GetCPUS":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetCPUS(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "GetCPU":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetCPU(ctx, field)
				return res
			})
		case "GetGPUS":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetGPUS(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "GetGPU":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetGPU(ctx, field)
				return res
			})
		case "GetRAMS":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetRAMS(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "GetRAM":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetRAM(ctx, field)
				return res
			})
		case "GetItems":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetItems(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "GetItem":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetItem(ctx, field)
				return res
			})
		case "GetSoftwares":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetSoftwares(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "GetSoftware":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetSoftware(ctx, field)
				return res
			})
		case "GetMicrofones":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetMicrofones(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "GetMicrofone":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetMicrofone(ctx, field)
				return res
			})
		case "GetCameras":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetCameras(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "GetCamera":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetCamera(ctx, field)
				return res
			})
		case "GetStorages":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetStorages(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "GetStorage":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetStorage(ctx, field)
				return res
			})
		case "GetMBoards":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetMBoards(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "GetMBoard":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetMBoard(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rAMImplementors = []string{"RAM"}

func (ec *executionContext) _RAM(ctx context.Context, sel ast.SelectionSet, obj *model.RAM) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rAMImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RAM")
		case "id":
			out.Values[i] = ec._RAM_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "marca":
			out.Values[i] = ec._RAM_marca(ctx, field, obj)
		case "modelo":
			out.Values[i] = ec._RAM_modelo(ctx, field, obj)
		case "memoria":
			out.Values[i] = ec._RAM_memoria(ctx, field, obj)
		case "velocidade":
			out.Values[i] = ec._RAM_velocidade(ctx, field, obj)
		case "tipo":
			out.Values[i] = ec._RAM_tipo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var registoApagadoImplementors = []string{"RegistoApagado"}

func (ec *executionContext) _RegistoApagado(ctx context.Context, sel ast.SelectionSet, obj *model.RegistoApagado) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registoApagadoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegistoApagado")
		case "id":
			out.Values[i] = ec._RegistoApagado_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nome":
			out.Values[i] = ec._RegistoApagado_nome(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var softwareImplementors = []string{"Software"}

func (ec *executionContext) _Software(ctx context.Context, sel ast.SelectionSet, obj *model.Software) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, softwareImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Software")
		case "nome":
			out.Values[i] = ec._Software_nome(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tipo":
			out.Values[i] = ec._Software_tipo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var softwareAtualizadoImplementors = []string{"SoftwareAtualizado"}

func (ec *executionContext) _SoftwareAtualizado(ctx context.Context, sel ast.SelectionSet, obj *model.SoftwareAtualizado) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, softwareAtualizadoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SoftwareAtualizado")
		case "id":
			out.Values[i] = ec._SoftwareAtualizado_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nome":
			out.Values[i] = ec._SoftwareAtualizado_nome(ctx, field, obj)
		case "atualizacao":
			out.Values[i] = ec._SoftwareAtualizado_atualizacao(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var softwareCriadoImplementors = []string{"SoftwareCriado"}

func (ec *executionContext) _SoftwareCriado(ctx context.Context, sel ast.SelectionSet, obj *model.SoftwareCriado) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, softwareCriadoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SoftwareCriado")
		case "id":
			out.Values[i] = ec._SoftwareCriado_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nome":
			out.Values[i] = ec._SoftwareCriado_nome(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var storageImplementors = []string{"Storage"}

func (ec *executionContext) _Storage(ctx context.Context, sel ast.SelectionSet, obj *model.Storage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, storageImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Storage")
		case "id":
			out.Values[i] = ec._Storage_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tipo":
			out.Values[i] = ec._Storage_tipo(ctx, field, obj)
		case "nome":
			out.Values[i] = ec._Storage_nome(ctx, field, obj)
		case "marca":
			out.Values[i] = ec._Storage_marca(ctx, field, obj)
		case "velocidade":
			out.Values[i] = ec._Storage_velocidade(ctx, field, obj)
		case "capacidade":
			out.Values[i] = ec._Storage_capacidade(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNCPU2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐCPU(ctx context.Context, sel ast.SelectionSet, v []*model.CPU) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCPU2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐCPU(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCPU2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐCPU(ctx context.Context, sel ast.SelectionSet, v *model.CPU) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CPU(ctx, sel, v)
}

func (ec *executionContext) marshalNCamera2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐCamera(ctx context.Context, sel ast.SelectionSet, v []*model.Camera) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCamera2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐCamera(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNComputador2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐComputador(ctx context.Context, sel ast.SelectionSet, v []*model.Computador) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOComputador2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐComputador(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNGPU2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐGpu(ctx context.Context, sel ast.SelectionSet, v []*model.Gpu) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGPU2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐGpu(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNGPU2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐGpu(ctx context.Context, sel ast.SelectionSet, v *model.Gpu) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GPU(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNItem2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Item) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNItem2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNItem2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐItem(ctx context.Context, sel ast.SelectionSet, v *model.Item) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Item(ctx, sel, v)
}

func (ec *executionContext) marshalNMBoard2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐMBoard(ctx context.Context, sel ast.SelectionSet, v []*model.MBoard) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMBoard2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐMBoard(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNMicrofone2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐMicrofone(ctx context.Context, sel ast.SelectionSet, v []*model.Microfone) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMicrofone2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐMicrofone(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNNovaCamera2goᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovaCamera(ctx context.Context, v interface{}) (model.NovaCamera, error) {
	res, err := ec.unmarshalInputNovaCamera(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNovaCamera2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovaCamera(ctx context.Context, v interface{}) ([]*model.NovaCamera, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.NovaCamera, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalONovaCamera2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovaCamera(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNNovaMBoard2goᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovaMBoard(ctx context.Context, v interface{}) (model.NovaMBoard, error) {
	res, err := ec.unmarshalInputNovaMBoard(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNovoCPU2goᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoCPU(ctx context.Context, v interface{}) (model.NovoCPU, error) {
	res, err := ec.unmarshalInputNovoCPU(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNovoCPU2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoCPU(ctx context.Context, v interface{}) (*model.NovoCPU, error) {
	res, err := ec.unmarshalInputNovoCPU(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNovoComputador2goᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoComputador(ctx context.Context, v interface{}) (model.NovoComputador, error) {
	res, err := ec.unmarshalInputNovoComputador(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNovoGPU2goᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoGpu(ctx context.Context, v interface{}) (model.NovoGpu, error) {
	res, err := ec.unmarshalInputNovoGPU(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNovoGPU2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoGpu(ctx context.Context, v interface{}) (*model.NovoGpu, error) {
	res, err := ec.unmarshalInputNovoGPU(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNovoItem2goᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoItem(ctx context.Context, v interface{}) (model.NovoItem, error) {
	res, err := ec.unmarshalInputNovoItem(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNovoMicrofone2goᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoMicrofone(ctx context.Context, v interface{}) (model.NovoMicrofone, error) {
	res, err := ec.unmarshalInputNovoMicrofone(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNovoMicrofone2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoMicrofone(ctx context.Context, v interface{}) ([]*model.NovoMicrofone, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.NovoMicrofone, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalONovoMicrofone2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoMicrofone(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNNovoRAM2goᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoRAM(ctx context.Context, v interface{}) (model.NovoRAM, error) {
	res, err := ec.unmarshalInputNovoRAM(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNovoRAM2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoRAM(ctx context.Context, v interface{}) ([]*model.NovoRAM, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.NovoRAM, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalONovoRAM2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoRAM(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNNovoSoftware2goᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoSoftware(ctx context.Context, v interface{}) (model.NovoSoftware, error) {
	res, err := ec.unmarshalInputNovoSoftware(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNovoStorage2goᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoStorage(ctx context.Context, v interface{}) (model.NovoStorage, error) {
	res, err := ec.unmarshalInputNovoStorage(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRAM2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐRAM(ctx context.Context, sel ast.SelectionSet, v []*model.RAM) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORAM2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐRAM(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNSoftware2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐSoftware(ctx context.Context, sel ast.SelectionSet, v []*model.Software) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSoftware2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐSoftware(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNStorage2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐStorage(ctx context.Context, sel ast.SelectionSet, v []*model.Storage) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOStorage2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐStorage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) marshalOCPU2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐCPU(ctx context.Context, sel ast.SelectionSet, v *model.CPU) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CPU(ctx, sel, v)
}

func (ec *executionContext) marshalOCamera2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐCamera(ctx context.Context, sel ast.SelectionSet, v []*model.Camera) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCamera2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐCamera(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCamera2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐCamera(ctx context.Context, sel ast.SelectionSet, v *model.Camera) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Camera(ctx, sel, v)
}

func (ec *executionContext) marshalOComponenteApagado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐComponenteApagado(ctx context.Context, sel ast.SelectionSet, v *model.ComponenteApagado) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ComponenteApagado(ctx, sel, v)
}

func (ec *executionContext) marshalOComponenteAtualizado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐComponenteAtualizado(ctx context.Context, sel ast.SelectionSet, v *model.ComponenteAtualizado) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ComponenteAtualizado(ctx, sel, v)
}

func (ec *executionContext) marshalOComponenteCriado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐComponenteCriado(ctx context.Context, sel ast.SelectionSet, v *model.ComponenteCriado) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ComponenteCriado(ctx, sel, v)
}

func (ec *executionContext) marshalOComputador2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐComputador(ctx context.Context, sel ast.SelectionSet, v *model.Computador) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Computador(ctx, sel, v)
}

func (ec *executionContext) marshalOComputadorAtualizado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐComputadorAtualizado(ctx context.Context, sel ast.SelectionSet, v *model.ComputadorAtualizado) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ComputadorAtualizado(ctx, sel, v)
}

func (ec *executionContext) marshalOComputadorCriado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐComputadorCriado(ctx context.Context, sel ast.SelectionSet, v *model.ComputadorCriado) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ComputadorCriado(ctx, sel, v)
}

func (ec *executionContext) marshalOConectividade2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐConectividade(ctx context.Context, sel ast.SelectionSet, v *model.Conectividade) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Conectividade(ctx, sel, v)
}

func (ec *executionContext) marshalOConexoesMBoard2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐConexoesMBoard(ctx context.Context, sel ast.SelectionSet, v *model.ConexoesMBoard) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConexoesMBoard(ctx, sel, v)
}

func (ec *executionContext) marshalOEquipamentoExterno2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐEquipamentoExterno(ctx context.Context, sel ast.SelectionSet, v *model.EquipamentoExterno) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EquipamentoExterno(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) marshalOGPU2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐGpu(ctx context.Context, sel ast.SelectionSet, v *model.Gpu) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GPU(ctx, sel, v)
}

func (ec *executionContext) marshalOHardwareInterno2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐHardwareInterno(ctx context.Context, sel ast.SelectionSet, v *model.HardwareInterno) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HardwareInterno(ctx, sel, v)
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalID(*v)
}

func (ec *executionContext) marshalOInformacao2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐInformacao(ctx context.Context, sel ast.SelectionSet, v *model.Informacao) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Informacao(ctx, sel, v)
}

func (ec *executionContext) unmarshalOInputConectividade2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐInputConectividade(ctx context.Context, v interface{}) (*model.InputConectividade, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInputConectividade(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInputEquipamentoExterno2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐInputEquipamentoExterno(ctx context.Context, v interface{}) (*model.InputEquipamentoExterno, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInputEquipamentoExterno(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInputHardwareInterno2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐInputHardwareInterno(ctx context.Context, v interface{}) (*model.InputHardwareInterno, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInputHardwareInterno(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInputInformacao2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐInputInformacao(ctx context.Context, v interface{}) (*model.InputInformacao, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInputInformacao(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInputListaHardware2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐInputListaHardware(ctx context.Context, v interface{}) (*model.InputListaHardware, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInputListaHardware(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) marshalOInterfacesMBoard2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐInterfacesMBoard(ctx context.Context, sel ast.SelectionSet, v *model.InterfacesMBoard) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._InterfacesMBoard(ctx, sel, v)
}

func (ec *executionContext) marshalOItem2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐItem(ctx context.Context, sel ast.SelectionSet, v *model.Item) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Item(ctx, sel, v)
}

func (ec *executionContext) marshalOItemAtualizado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐItemAtualizado(ctx context.Context, sel ast.SelectionSet, v *model.ItemAtualizado) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ItemAtualizado(ctx, sel, v)
}

func (ec *executionContext) marshalOItemCriado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐItemCriado(ctx context.Context, sel ast.SelectionSet, v *model.ItemCriado) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ItemCriado(ctx, sel, v)
}

func (ec *executionContext) marshalOListaHardware2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐListaHardware(ctx context.Context, sel ast.SelectionSet, v *model.ListaHardware) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListaHardware(ctx, sel, v)
}

func (ec *executionContext) marshalOMBoard2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐMBoard(ctx context.Context, sel ast.SelectionSet, v *model.MBoard) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MBoard(ctx, sel, v)
}

func (ec *executionContext) marshalOMicrofone2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐMicrofone(ctx context.Context, sel ast.SelectionSet, v []*model.Microfone) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMicrofone2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐMicrofone(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOMicrofone2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐMicrofone(ctx context.Context, sel ast.SelectionSet, v *model.Microfone) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Microfone(ctx, sel, v)
}

func (ec *executionContext) unmarshalONovaCamera2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovaCamera(ctx context.Context, v interface{}) (*model.NovaCamera, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNovaCamera(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONovaMBoard2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovaMBoard(ctx context.Context, v interface{}) (*model.NovaMBoard, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNovaMBoard(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONovoMicrofone2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoMicrofone(ctx context.Context, v interface{}) (*model.NovoMicrofone, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNovoMicrofone(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONovoRAM2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoRAM(ctx context.Context, v interface{}) (*model.NovoRAM, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNovoRAM(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONovoSoftware2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoSoftware(ctx context.Context, v interface{}) ([]*model.NovoSoftware, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.NovoSoftware, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalONovoSoftware2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoSoftware(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalONovoSoftware2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoSoftware(ctx context.Context, v interface{}) (*model.NovoSoftware, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNovoSoftware(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONovoStorage2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐNovoStorage(ctx context.Context, v interface{}) (*model.NovoStorage, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNovoStorage(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORAM2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐRAM(ctx context.Context, sel ast.SelectionSet, v *model.RAM) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RAM(ctx, sel, v)
}

func (ec *executionContext) marshalORegistoApagado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐRegistoApagado(ctx context.Context, sel ast.SelectionSet, v *model.RegistoApagado) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegistoApagado(ctx, sel, v)
}

func (ec *executionContext) marshalOSoftware2ᚕᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐSoftware(ctx context.Context, sel ast.SelectionSet, v []*model.Software) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSoftware2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐSoftware(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOSoftware2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐSoftware(ctx context.Context, sel ast.SelectionSet, v *model.Software) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Software(ctx, sel, v)
}

func (ec *executionContext) marshalOSoftwareAtualizado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐSoftwareAtualizado(ctx context.Context, sel ast.SelectionSet, v *model.SoftwareAtualizado) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SoftwareAtualizado(ctx, sel, v)
}

func (ec *executionContext) marshalOSoftwareCriado2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐSoftwareCriado(ctx context.Context, sel ast.SelectionSet, v *model.SoftwareCriado) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SoftwareCriado(ctx, sel, v)
}

func (ec *executionContext) marshalOStorage2ᚖgoᚑgraphqlᚑequipamentoᚋgraphᚋmodelᚐStorage(ctx context.Context, sel ast.SelectionSet, v *model.Storage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Storage(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
