# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Item {
  id: ID!
  marca: String
  modelo: String
  nome: String!
  paginaWeb: String
}

type Computador {
  id: ID!
  nome: String!
  info: Informacao
  conectividade: Conectividade
  equipamento: HardwareInterno
  hardware: ListaHardware
  perifericos: EquipamentoExterno
  software: [Software]
}

type Informacao {
  salaAtribuida: String
  ultimaInspecao: String
  tipoPc: String
  utilisacao: String
  tipoUtilisacao: String
  dominio: String
  sistemaOperativo: String
}

type Conectividade {
  ethernet: Boolean
  wifi: Boolean
  conectadoDominio: Boolean
}

type HardwareInterno {
  cpuUtil: String
  gpuUtil: String
  ramSlots: Int
  ramTipo: String
  ramVelocidade: String
  ramMemoria: String!
}

type ListaHardware {
  cpu: CPU!
  gpu: GPU!
  ram: [RAM]!
  placaM: MBoard!
  armazenamento: Storage!
}

type Storage {
  id: ID!
  tipo: String
  nome: String
  marca: String
  velocidade: String
  capacidade: String
}

type CPU {
  id: ID!
  marca: String
  modelo: String
  nucleos: Int
  maxRam: Int
  velocidade: String
  tdp: Float
}

type GPU {
  id: ID!
  marca: String
  modelo: String
  vram: String
  velocidade: String
  saidas: String
  tdp: Float
}

type RAM {
  id: ID!
  marca: String
  modelo: String
  memoria: String
  velocidade: String
  tipo: String
}

type MBoard {
  id: ID!
  marca: String
  modelo: String
  tipoMemoria: String
  chipset: String
  familiaCompativel: String
  socket: String
  dimSlots: Int
  dimMaxMem: Int
  dimMemType: String
  dimMaxVelc: String
  conexoes: ConexoesMBoard!
  interfaces: InterfacesMBoard!
}

type ConexoesMBoard {
  sata: Int
  pcie4_16: Int
  pcie3_16: Int
}

type InterfacesMBoard {
  usb2: Int
  usb3: Int
  lan: Boolean
  display: Int
  hdmi: Int
  audio: Int
  wifi: Int
}

type EquipamentoExterno {
  camera: [Camera]
  microfone: [Microfone]
}

type Microfone {
  id: ID!
  marca: String
  modelo: String!
}

type Camera {
  id: ID!
  marca: String
  modelo: String!
}

type Software {
  nome: String!
  tipo: String
}

type SoftwareCriado {
  id: ID!
  nome: String

}

type ComputadorCriado{
  id: ID!
  nome: String

}

type ItemCriado {
  id: ID!
  nome: String

}

type ComponenteCriado {
  id: ID!
  tipoComponente: String!
  modelo: String
  
}

type ItemAtualizado {
  id: ID!
  nome: String!
  modelo: String
  atualizacao: String
}

type SoftwareAtualizado{
  id: ID!
  nome: String
  atualizacao: String
}

type ComputadorAtualizado {
  id: ID!
  nome: String
  atualizacao: String
}

type RAMAtualizado {
  id: ID!
  modelo: String
  atualizacao: String
}

type ComponenteAtualizado {
  id: ID!
  modelo: String
  atualizacao: String
}

type ComponenteApagado {
  id: ID!
  modelo: String
  marca: String
}

type RegistoApagado {
  id: ID!
  nome: String
}

type Query {
  GetComputadores: [Computador!]
  GetComputador(id: ID!): Computador

  GetCPU(id: ID!): CPU
  GetCPUS: [CPU]
  
  GetGPU(id: ID!): GPU
  GetGPUS: [GPU]!
  
  GetRAM(id: ID!): RAM
  GetRAMS: [RAM]

  GetItems: [Item!]
  GetItem(id: ID!): Item

  GetSoftwares: [Software!]
  GetSoftware(id: ID!): Software
}

input NovoComputador {
  nome: String!
  conteudo: String
}

input UpdateComputador {
  nome: String!
  novoConteudo: String!
}

input NovoItem {
  marca: String
  modelo: String!
  nome: String
  paginaWeb: String
}

input NovoCPU {
  marca: String
  modelo: String!
  nucleos: Int
  maxRam: Int
  velocidade: String
  tdp: Float
}

input NovoGPU {
  marca: String
  modelo: String
  vram: String
  velocidade: String
  saidas: String
  tdp: Float
}

input NovoRAM {
  marca: String
  modelo: String
  memoria: String
  velocidade: String
  tipo: String
}

input NovoSoftware {
  nome: String!
  tipo: String
}

type Mutation {
  UpdateComputador(id: ID!, input: UpdateComputador!): ComputadorAtualizado
  UpdateGPU(id: ID!, input: NovoGPU!): ComponenteAtualizado
  UpdateCPU(id: ID!, input: NovoCPU!): ComponenteAtualizado
  UpdateRAM(id: ID!, input: NovoRAM!): ComponenteAtualizado
  UpdateItem(id: ID!, input: NovoItem!): ItemAtualizado
  UpdateSoftware(id: ID!, input: NovoSoftware!): SoftwareAtualizado

  CriarSoftware(input: NovoSoftware!): SoftwareCriado
  CriarComputador(input: NovoComputador!): ComputadorCriado
  CriarItem(input: NovoItem!): ItemCriado

  CriarCPU(input: NovoCPU!): ComponenteCriado
  CriarGPU(input: NovoGPU!): ComponenteCriado
  CriarRAM(input: NovoRAM!): ComponenteCriado

  ApagarComponente(id: ID!): ComponenteApagado
  ApagarItem(id: ID!): RegistoApagado
  ApagarSoftware(id: ID!): RegistoApagado
  ApagarComputador(id: ID!): RegistoApagado
}